/* OUTPUT ON (DBMS_OUTPUT.PUT_LINE() 을 사용하기 위해 설정)*/
SET SERVEROUTPUT ON;

/* PL/SQL */
BEGIN
  DBMS_OUTPUT.PUT_LINE('HELLO ORACLE');
END;
/

/* 이름을 검색하는 PL/SQL 프로시저*/
DECLARE
  ID NUMBER;
  NAME VARCHAR2(20);
  NO VARCHAR2(20);
BEGIN
  SELECT EMP_ID, EMP_NAME, EMP_NO
  INTO ID, NAME, NO
  FROM EMPLOYEE
  WHERE EMP_NAME = '&이름';
  DBMS_OUTPUT.PUT_LINE(ID);
  DBMS_OUTPUT.PUT_LINE(NAME);
  DBMS_OUTPUT.PUT_LINE(NO);
EXCEPTION
  WHEN NO_DATA_FOUND 
  THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/


/* 문제 1
해당 사원의 사원번호를 입력시
이름, 부서코드, 직급코드이 출력되도록 PL/SQL로 만들어 보시오
*/
DECLARE
    NAME VARCHAR2(20);
    DEPTCODE VARCHAR2(20);
    JOBCODE VARCHAR2(10);
BEGIN
    SELECT EMP_NAME, DEPT_CODE, JOB_CODE
    INTO NAME, DEPTCODE, JOBCODE
    FROM EMPLOYEE
    WHERE EMP_ID LIKE '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE(NAME);
    DBMS_OUTPUT.PUT_LINE(DEPTCODE);
    DBMS_OUTPUT.PUT_LINE(JOBCODE);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

/* 문제 2
해당 사원의 사원번호를 입력시
이름, 부서명, 직급명이 출력되도록 PL/SQL로 만들어 보시오
*/
DECLARE
    NAME VARCHAR2(20);
    DEPTNAME VARCHAR2(20);
    JOBNAME VARCHAR2(10);
BEGIN
    SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
    INTO NAME, DEPTNAME, JOBNAME
    FROM EMPLOYEE E , DEPARTMENT , JOB J
    WHERE E.EMP_ID LIKE '&EMP_ID'
    AND E.DEPT_CODE = DEPT_ID(+)
    AND E.JOB_CODE = J.JOB_CODE;
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서명 : ' || DEPTNAME);
    DBMS_OUTPUT.PUT_LINE('직급명 : ' || JOBNAME);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/

/* 문제 2 스칼라 서브쿼리 방법 */
DECLARE
    NAME VARCHAR2(20);
    D_TITLE VARCHAR2(20);
    J_NAME VARCHAR2(20);
BEGIN
    SELECT EMP_NAME,(SELECT DEPT_TITLE
                    FROM DEPARTMENT D
                    WHERE E.DEPT_CODE = D.DEPT_ID)
                        ,(SELECT JOB_NAME
                            FROM JOB J
                            WHERE J.JOB_CODE = E.JOB_CODE)
    INTO NAME,D_TITLE,J_NAME
    FROM EMPLOYEE E
    WHERE EMP_ID = '&사원번호';
    DBMS_OUTPUT.PUT_LINE('이름: ' || NAME);
    DBMS_OUTPUT.PUT_LINE('부서명: ' || D_TITLE);
    DBMS_OUTPUT.PUT_LINE('직급명: ' || J_NAME);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다.');
END;
/

/*
참조형 변수 (%TYPE)
*/
DECLARE
    ID EMPLOYEE.EMP_ID%TYPE; -- EMPLOYEE 테이블의 EMP_ID 자료형을 사용
    NAME EMPLOYEE.EMP_NAME%TYPE; -- EMPLOYEE 테이블의 EMP_NAME 자료형을 사용
    NO EMPLOYEE.EMP_NO%TYPE; -- EMPLOYEE 테이블의 EMP_NO 자료형을 사용
    SALARY EMPLOYEE.SALARY%TYPE; -- EMPLOYEE 테이블의 EMP_SALARY 자료형을 사용
    HIRE_DATE EMPLOYEE.HIRE_DATE%TYPE; -- EMLOYEE 테이블의 EMP_HIRE_DATE 자료형을 사용
BEGIN
    SELECT EMP_ID, EMP_NAME, EMP_NO, SALARY, HIRE_DATE
    INTO ID, NAME, NO, SALARY, HIRE_DATE
    FROM EMPLOYEE
    WHERE EMP_NAME LIKE '&사원명';
    DBMS_OUTPUT.PUT_LINE('사원번호 : ' || ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('주민번호 : ' || NO);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
    DBMS_OUTPUT.PUT_LINE('입사일 : ' || HIRE_DATE); 
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/


/*
참조형 변수 (%ROWTYPE)
*/
DECLARE
  EMP EMPLOYEE%ROWTYPE;
BEGIN
  SELECT EMP_ID, EMP_NAME, EMP_NO
  INTO EMP.EMP_ID, EMP.EMP_NAME, EMP.EMP_NO
  FROM EMPLOYEE
  WHERE EMP_ID LIKE '200';
  DBMS_OUTPUT.PUT_LINE('사원번호 : ' || EMP.EMP_ID);
  DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP.EMP_NAME);
  DBMS_OUTPUT.PUT_LINE('주민번호 : ' || EMP.EMP_NO);
EXCEPTION
  WHEN NO_DATA_FOUND
  THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
END;
/


/* 레코드 (타입을 스스로 만듦) */

DECLARE
  TYPE MY_ROW_TYPE IS RECORD(
    ID EMPLOYEE.EMP_ID%TYPE,
    NAME VARCHAR2(20),
    SALARY EMPLOYEE.SALARY%TYPE
  );
  EMP MY_ROW_TYPE;
BEGIN
  SELECT EMP_ID, EMP_NAME, SALARY
  INTO EMP.ID, EMP.NAME, EMP.SALARY
  FROM EMPLOYEE
  WHERE EMP_ID LIKE '200';
  DBMS_OUTPUT.PUT_LINE('사원번호 : ' || EMP.ID);
  DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP.NAME);
  DBMS_OUTPUT.PUT_LINE('급여 : ' || EMP.SALARY);
END;
/


