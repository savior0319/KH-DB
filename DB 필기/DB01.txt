
   @ Data
   -> 어떠한 자료 혹은 어떠한 값 (정보)


   @ DataBase(DB)
   -> 한 조직에 필요한 정보를 여러 응용 시스템에서 공용할 수 있도록 논리적으로
        연관된 데이터를 모으고, 중복되는 데이터를 최소화 하여 구조적으로 통합 / 저장해 놓은 것
   -> 즉, 정리하면 연관된 데이터들을 중복 데이터 없이 구조적으로 모아 놓은 데이터

   @ DBMS(DataBase Management System)
   -> 데이터베이스에서 데이터를 추출, 조직, 정의, 제어 등을 할 수 있게 해주는
   데이터 베이스 전용 관리 프로그램
   -> 방대한 데이터는 있으나 관리하는 관리자가 없다면 결국은 데이터를 검색, 수정, 삭제 등의 업무를 함에 있어서 불편하게 됨
       (그렇기 때문에 DBMS가 있음)

   @ DBMS의 기능
   데이터 추출 : 사용자가 조회하는 데이터 혹은 응용 프로그램의 데이터를 추출 함
  	- 검색 등
   데이터 조작 : 데이터를 조작하는 소프트웨어(응용 프로그램)가 요청하는 데이터의 삽입, 수정, 삭제 작업을 지원 함
  	- 추가, 수정, 삭제
   데이터 정의 : 데이터의 구조를 정의하고 데이터 구조에 대한 삭제 및 변경 기능을 수행 함
  	- 데이터를 저장하는 공간 (테이블 생성 및 수정, 삭제 등)
   데이터 제어 : 데이터베이스 사용자를 생성하고 모니터링하며 접근권한을 제어함
  	- 사용자(관리자) 추가 및 데이터 손실, 오류, 복구 등

  Data 의 묶음 -> Table
  Table 의 묶음 -> DB
  여러개의 DB를 관리하는 시스템 -> DBMS

   -> 즉, 수 많은 데이터는 테이블에 담기고 테이블들은 DB안에 담겨 있음
  그리고 DBMS는 수 많은 DB들을 관리함

   @ Orcale DBMS
   -> 미국 오라클(Oracle)사의 관계형 데이터베이스 관리 스스템
   -> 국제 표준화 기구의 표준 구조화 조회 언어와 PL/SQL을 지원
   -> 별도의 라이선스 구입 후 사용
  	- 비상업용은 라이선스 없어도 사용이 가능함
   -> 현재 12c 버전까지 출시 됨

   @ Oracle DBMS 에디션
   -> Enterprise Edition : 기업용
  	※ 가장 강력하고 다양한 기능들을 제공함
   -> Standard Edition : 부서용
  	※ 부서용 인터넷 애플리케이션 개발, 관리하기 위한 데이터베이스 관리 시스템
  	※ EE와 SE는 전체 기능 설치, 표준 기능 설치의 차이
  	EE는 전체, 표준설치 가능, 또는 기능 설치만 가능
   -> Personal Edtion : 교육이나 클라이언트 작업용
  	※ 데스크탑 컴퓨터용 Oracle 데이터 베이스 (작은 규모)
   -> Lite Edition : 모바일용 데이터 베이스
   -> Express Edition : 무료 배포용
  	※ Express Edition (무료 버전) - XE 버전이라고 부름


   @ Orcal DBMS의 구조
   -> 일반적인 DBMS의 구조는 DBMS-DB-테이블-데이터 형태의 구조를 가지고 있지만 Orcle은 DBMS-DB-테이블스페이스
       -테이블-데이터 형태의 구조를 가지고 있음


  		       →	  테이블   - 데이터 데이터 데이터
  		   ↗
  		DB  → →  테이블   - 데이터 데이터 데이터
  	       ↗   ↘
  	    ↗	     →	 테이블	 - 데이터 데이터 데이터
  	DBMS
  	    ↘	     →	 테이블	 - 데이터 데이터 데이터
  	       ↘   ↗
  	           DB  → →   테이블	 - 데이터 데이터 데이터
  		  ↘
  		      →	  테이블	 - 데이터 데이터 데이터

   @ SQL Plus
   -> Oracle DBMS를 CMD 창에서 관리할 수 있는 프로그램

  ## 테스트 계정(HR) 활성화 하기 ##

  1. system 계정으로 접속
  	-Enter User-name : system
  	-Enter Password : [비밀번호 입력]

  2. 계정 확인 SQL
  	select username from dba_users;

  3. 테스트 계정(HR) 활성화
  	alter user [계정] account unlock; --락 해제
  	alter user [계정] identified by [비밀번호];

  	ex)
  	alter user HR account unlock;
  	alter user HR identified by hr;

  4. 접속하기
  	conn [계정];
  	ex)
  	conn HR;
  	-> 접속 시 설정했던 비밀번호 입력 후 접속

  5. 현재 접속된 자신의 계정 확인
  	show user;

  ## 새로운 계정 생성 후 접속 ##

  1. system 계정으로 접속
  	conn system
  	password : [비밀번호 입력]

  2. 새로운 계정 생성
  	create user [계정이름] identified by [비밀번호];
  	ex) create user mslove identified by mslove;

  3. 접속 권한 부여
  	-> 접속 권한이 없으면 계정이 생성되어도 접속이 불가능함
  	grant connect to [계정이름]; // connect는 접속 권한 임

  4. 접속 시도
  	conn mslove
  	password : [비밀번호 입력]

  5. 접속 계정 확인
  	show user;

  ## 테이블 생성 및 데이터 삽입, 수정, 삭제 권한 부여하기 ##

  1. 접속 후 현재 테이블 확인
  	conn scott/scott;
  	select table_name from tabs;




  2. 테이블 생성하기 위한 권한 부여 (권한은 system 계정으로 부여해주세요)
  	conn system/[비밀번호]
  	grant resource to [계정];

  3. scott 계정으로 재접속 하여 테이블 생성및 데이터 삽입
  	※ 아직 sql 문을 배운 상태가 아니므로 scott_en.sql 파일을 이용하세요
  	※ scott_en.sql 파일을 사용할 때에는 해당 파일의 경로에서 sqlplus를 작동 시켜야 합니다

  4. SQLPLUS 추가 기능

  - 버퍼에 있는 SQL문 확인 : L
  - 버퍼에 있는 SQL문 실행 : /.R
  - 사용한 SQL문 저장 : save 파일명
  	버퍼에 있는 구문 저장(.sql)
  - 문서 편집 sql 파일 수정 : edit
  - sql 파일 버퍼에 저장하기 : get
  - OS명령어 실행 : host / exit (빠져나오기)
  - sql 파일 실행 : @파일명

  @ SQL 이란?
   -> Structured Query Language (구조화된 질의 언어)
   -> 관계형 데이터 베이스에서 데이터를 조회하거나 조작하기 위해 사용하는 표준 언어
   -> 원하는 데이터를 찾는 방법이나 절차를 기술하는 것 뿐만에 아닌
  데이터 삽입, 수정, 삭제 등 다양한 기능을 수행할 수 있음
   -> DBMS 따라 사용하는 문법이 조금씩 다름

  @ 기본 SQL 문법 종류
  -> 데이터 정의어 : DDL (Data Defintion Language)
  -> 데이터 조작어 : DML (Data Manipulation Language)
  -> 데이터 제어어 : DCL (Data Control Language)
  -> 트랙젝션 제어어 : TCL (Transaction Control Language)

  @ DDL (Data Definition Language)
  - 데이터 베이스의 구조를 정의하거나 변경, 삭제, 하기 위해 사용하는 언어
  -> 주로 DB 관리자 또는 설계자가 사용 함
  -> CREATE(개체 생성), ALTER(개체 수정), DROP(개체 삭제), TRUNCATE(개체 초기화)
  ex) DB를 생성/수정/삭제 하거나 TABLE을 생성 수정 삭제 함
  	그 외 다양한 OBJECT 도 생성 수정 삭제 함

  @ DML (Data Manupulation Language)
  -> Data를 조작하기 위해 사용하는 언어
  -> Data를 삽입 수정 삭제 조회 등의 동작을 제어함
  -> Data를 이용하려는 사용자와 시스템 간의 인터페이스를 직접적으로 제공하는 언어

  -> INSERT 데어터 삽입 UPDATE 수정 DELETE 삭제
  	-> DQL (Data Query Language)
  	-> 데이터 검색 (추출)을 하기 위해 사용되는 언어
  	-> SELECT (데이터 검색)

  @ DCL (Data Control Language)
  -> 사용자의 권한이나, 관리자 설정 등을 처리
  -> GRANT(유저 권한 생성), REVOKE(유저 권한 삭제)

  @ TCL (Transaction Control Language)
  -> 트랙젝션 관리 처리 언어
  -> COMMIT(트랜잭션 종료 처리 후 저장), ROLLBACK(트랜잭션 취소), SAVE(트랙잭션 포인트 제공)

  @ Table
  -> 데이터를 담고 있는 개체
  -> Table안에 데이터를 검색/삽입/수정/삭제 하기 위해서는 기본적인 구조를 알아야 함
  -> Table은 기본적으로 행과 열을 이용하여 데이터를 표현 함

  			STUDENT Table
  	=================================================
  	| grade	| name	|  age	| gender|   phoneNumber	|
  	=================================================
  	|   1	|김학구	|  20	|  남	|  01012341111	     |
  	-------------------------------------------------
  	|   2	|김봉남	|  21	|  남	|  01088882223       |
  	-------------------------------------------------
  	|   2	|고길동	|  21	|  여	|  01038384040       |
  	-------------------------------------------------
  	|   1	|박삼식	|  21	|  남	|  01050509999       |
  	-------------------------------------------------
  	|   3	|김꽃님	|  24	|  남	|  01099582333       |
  	-------------------------------------------------
  	|   4	|최장군	|  24	|  여	|  01001120114       |
  	-------------------------------------------------


  Relation : TABLE을 Relation 이라고 부름
   ex) 현재의 Relation 명 (테이블명)은 "STUDENT"가 됨

  Column(Arribute) : 특정한 단순 자료형과 데이터의 열 (세로)
  Row(Tuble) : 테이블에서 한 객체에 대한 전체 정보를 표현한 행(가로)


  @ 데이터 타입
  -> 오라클에서 데이터를 표현하기 위한 타입

  ────────────────────────────────────────────────────────────────────────────────
    구분	|  데이터 타입	| 하위 데이터 타입	|            설명 		|
  ────────────────────────────────────────────────────────────────────────────────
    숫자	|                           NUMBER   	|  			|	숫자			|
  ────────────────────────────────────────────────────────────────────────────────
  	|  		|                            	CHAR	 	|고정길이 문자(최대 2000/1Byte) |
  	| 		|--------------------------------------------------------
  	|		  |	                          VARCHAR2	|가변길이 문자(최대 4000/1Byte)	|
  	| 		|--------------------------------------------------------
    문자	|  CHARACTER	              |	NCHAR		|CHAR와 동일하고 유니코드 문자	|
  	| 		|--------------------------------------------------------
  	|	  	|	                         NVARCHAR2	|VARCHAR와 동일하고 유니코드문자|
  	| 		|--------------------------------------------------------
  	|		  |	                            LONG		|가변길이 문자 (최대 2GByte)	|
  ────────────────────────────────────────────────────────────────────────────────
  	|                         DATE	|		     	날짜			        |
    날짜	|------------------------------------------------------------------------
  	|                           TIMESTAMP	|			|연도,월,일,시,분,초,밀리초 까지|
  	|	     	|		                                               	|	입력가능		|
  ────────────────────────────────────────────────────────────────────────────────
  	|		|    	CLOB		|가변길이 문자(최대 4기가바이트)|
   데이터	|    LOB	|--------------------------------------------------------
  	|		|	BLOB		|Binary Data			|
  ────────────────────────────────────────────────────────────────────────────────



   @ NUMBER ([P,S])

   P: 표현 할 수 있는 전체 숫자 자리수 (1~30)
   S: 소수점 이하 자리수 (84~127)

   만약 실제 값 1234.678이 들어 왔다면

   NUMBER(7,3) 1234.678
   NUMBER(7) 1235
   NUMBER 1234.678
   NUMBER(7,1) 1234.7
   NUMBER(5,-2) 1200


  @ CHAR(SIZE [Byte | Char])
  -> SIZE : 포함될 문자(열) 크기
  -> 지정한 크기보다 작은 문자(열)이 입력되고 남는 공간은 공백으로 채움
  -> 데이터는 ''를 사용하여 표기하고, 대/소문자로 구분함

  만약 'Orcale' 이라는 데이터가 들어 왔다면?

  데이터 타입                    저장되는 값
  CHAR(6)                        ORACLE
  CHAR(9)                        ORACLE (공백 3칸)
  CHAR(3)                        에러


  만약 '한국'이라는 데이터가 들어 왔다면
  CHAR(6)                          한국
  CHAR(9)                          한국 (공백 3칸)
  CHAR(3)                          에러


  ex) 한국
  1. CHAR(3) -> 영어 3글자, 한글 1글자 (x)
  2. NCHAR(3) -> 영어, 한글 3글자 (o)
  3. VARCHAR2(3) -> 영어 3글자, 한글 1글자 (x)
  4. NVARCHAR2(3) -> 영어, 한글 3글자 (o)

  ※ 한글은 Express 버전에서는 1글자당 3Byte로 처리 됨 (EE 버전은 2Byte)

  @ DATE
  -> 일자 및 시간 정보를 관리
  -> 기본적으로 화면에는 년/월/일 정보만 표기 됨
  -> 날짜의 연산 및 비교가 가능함

  ──────────────────────────────────────────────────────────────────────
  연산              결과 타입                 설명
  ──────────────────────────────────────────────────────────────────────
  날짜 + 숫자        DATE                     작성한 숫자만큼 며칠 후를 의미
  날짜 - 숫자        DATE                     작성한 숫자만큼 며칠 전을 의미
  날짜 - 날짜        NUMBER                   두 날짜의 차이(일수)를 의미
  날짜 - 숫자/24     DATE                     날짜 + 시간의 의미
  ──────────────────────────────────────────────────────────────────────

  @ DQL (DML에 속함)
  -> 데이터를 검색(추출)하기 위해 사용되는 언어
  -> DQL은 DML에 속한 언어 이기도 함
  -> SELECT 구문에 (데이터 검색)
  -> 데이터를 조회한 결과를 Result Set이라고 함
  -> SELECT 구문에 의해 반환된 행들의 집합을
  -> Result Set은 0개 이상의 행이 포함될 수 있음 (0개는 검색결과가 없음)
  -> Result Set은 특정한 기준에 의해 정렬 될 수 있음
  -> 특정 컬럼이나 특정 행을 조회할 수 있으며,
    여러 테이블에서 특정행/컬럼을 조회할 수 있음

  @ SELECT 기본 작성법
  1. SELECT 컬럼명 FROM 테이블명;
  2. SELECT 컬럼명 FROM 테이블명 WHERE 조건;

  SELECT -> 조회하고자 하는 컬럼명 기술
            여러개를 기술하고자 하면 콤마(..)로 구분하고 모든 컬럼 조회시 '*' 사용
  FROM   -> 조회 대상 컬럼이 포함된 테이블명을 기술
  WHERE  -> 행을 선택하는 조건을 기술
            여러개의 제한조건을 포함할 수 있으며
            각 각의 제한 조건은 논리 연산자로 연결함
            제한조건을 만족시키는 행들만 Result Set에 포함 됨
