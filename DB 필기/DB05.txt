
  @ RIGHT OUTER JOIN (오른쪽 외부 조인)
  -> 테이블 B 모두 반환
  -> 테이블 A 조건 구문에 일치하는 데이터만 반환

  테이블 A의 EMP_NAME 과 DEPT_CODE
  -> SELECT EMP_NAME, DEPT_CODE FROM DEPARTMENT;

  오른쪽 조인 결과

  -> SELECT EMP_NAME, DEPT_TITLE FROM EMPLOYEE
  RIGHT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

  @ FULL OUTER JOIN (완전 외부 조인)
  -> 테이블 A, 테이블 B 조건구문에 일치하는 모든 데이터 반환

  완전 외부 조인 결과
  -> SELECT EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    FULL JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

  @ CROSS JOIN (상호 조인)
  -> 카테이션곱(Cartensian Product)이라고도 함
  -> 조인 되는 테이블의 각 행들이 모두 매핑된 데이터가 검색되는 조인
  -> A와 B를 서로 조인할 때, 조인 조건을 생략하고 A테이블의 모든 행이 B A테이블의 모든 행들과 조인 되는 경우
  한 쪽 테이블의 모든 행과 다른쪽 테이블의 모든 행을 조인 시킴
        - 결과는 두 테이블의 컬럼 수를 곱한 개수가 나옴
        - 조건이 없기 때문에 A 테이블의 한행 당 B 테이블의 모든 행이 되는 것임

  @ NON_EQUI JOIN (비등가 조인)
  -> 지정한 컬럼 값이 일치하는 경우가 아닌, 값의 범위에 포함되는 행들을 연결하는 방식
  -> "=" 등가 연산자가 아닌 (Between, >, <, >=, <=, <> 등) 연산자들을 사용함

  @ SELF JOIN (셀프 조인)
  -> 조인은 두개 이상의 서로 다른 테이블을 연결 하기도 하지만, 같은 테이블(하나의 테이블)을
  조인 하는 경우가 있음
  -> 이러한 조인을 SELF JOIN 이라고 함

  @ 다중 JOIN
  -> 여러개의 조인문을 한번에 사용 할 수 있음

  1. EMPLOYEE 테이블과 DEPARTMENT 테이블을 조인해서
  EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE을 보고 싶다면,

  SELECT EMP_ID, EMP_NAME, DEPT_CODE, DEPT_TITLE
  FROM EMPLOYEE JOIN DEPARTMENT
  ON DEPT_CODE = DEPT_ID;

  2. DEPARTMENT 테이블과 LOCATION 테이블을 조인해서 DEPARTMENT의 LOCATION_ID에 따른 LOCAL_NAME을 보고 싶다면,

 @ 집합 연산자(Set Operator)
 -> 두 개 이상의 테이블에서 조인을 사용하지 않고, 연관된 데이터를 조회하는 방법
 -> 여러 개의 질의의 결과를 연결하여 하나로 결합하는 방식
 -> 각 테이블의 조회 결과를 하나의 테이블에 합쳐서 반환 함
 -> 조건
        - SELECT 질의 '컬럼 수가 동일' 해야 함
        - SELECT 질의 동일 위치에 존재하는 컬럼의 '데이터 타입이 상호 호환 가능' 해야함

  -> UNION, UNION ALL, INTERSECT, MINUS 가 있음

  @ UNION
  -> UNION과 UNION ALL은 여러 개의 쿼리 결과를 하나로 합치는 연산자
  -> UNION은 중복된 영역을 제외하고 하나로 합치는 연산자

  A = {1,5,3,4,2};
  B = {7,6,3,8,5,9,10};

  A UNION B => {1,2,3,4,5,6,7,8,9,10};
  	-> 중복된 데이터를 제외하고 출력됨 (첫번째 컬럼을 기준으로 오름차순으로 보여줌)

  ex)
  -- 부서코드가 D5인 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY 를 출력
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5';
  -- 결과가 6명이 출력 됨


  -- 급여가 300만원보다 큰 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY를 출력
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE SALARY > 3000000;
  -- 결과는 8명이 출력 됨


  -- UNION을 이용하여 한번에 출력 --
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5'
  UNION
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE SALARY > 3000000;

  @ UNION ALL
  -> UNION ALL은 UNION과 같이 여러 쿼리 결과물에 대한 합집합을 의미하며
  UNION과의 차이 점은 중복된 영역도 포함 시키는 연산자

  A = {1,5,3,4,2};
  B = {7,6,3,8,5,9,10};

  A UNION ALL B => {1,2,3,3,4,5,5,6,7,8,9,10};

  -> 중복된 데이터 제거 작업 없이 모두 보여줌
  -> 정렬 없이 데이터 그대로 합해서 보여 줌

  ex)
  -- 부서코드가 D5인 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY 를 출력
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5';
  -- 결과가 6명이 출력 됨


  -- 급여가 300만원보다 큰 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY를 출력
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE SALARY > 3000000;
  -- 결과는 8명이 출력 됨


  -- UNION ALL 결과----
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5'
  UNION ALL
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE SALARY > 3000000;


  @ INTERSECT
  -> 여러 개의 SELECT 결과에서 공통된 부분만 결과로 추출함
  -> 즉, 수행 결과에 대한 교집합 이라고 볼 수 있음


  A = {1,5,3,4,2};
  B = {7,6,3,8,5,9,10};

  A INTERSECT B => {3,5};
  	-> 공통된 요소만 보여줌 (교집합)

  ex)
  -- 부서코드가 D5인 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY 를 출력
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5';
  -- 결과가 6명이 출력 됨

  -- 급여가 300만원보다 큰 사람의 EMP_ID,EMP_NAME,DEPT_CODE,SALARY를 출력
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE SALARY > 3000000;
  -- 결과는 8명이 출력 됨

  -- INTERSECT 결과 --
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE DEPT_CODE = 'D5'
  INTERSECT
  SELECT EMP_ID,EMP_NAME,DEPT_CODE,SALARY
  FROM EMPLOYEE
  WHERE SALARY > 3000000;


  @ MINUS
  -> 선행 SELECT 결과에서 다음 SELECT 결과와 겹치는 부분을 제외한 나머지 부분만
  추출함
  -> 즉, 두 쿼리 결과물의 차집합이라고 볼 수 있음

  A = {1, 5, 3, 4, 2};
  B = {7, 6, 3, 8, 5, 9, 10};

  A MINUS B = {1, 2, 4}
      -> A를 중점으로 B와 공통된 요소를 뺀 A를 말함

  B MINUS A = {6, 7, 8 ,9, 10};
      -> B를 중점으로 A와 공통된 요소를 뺀 B를 말함


  @ 서브 쿼리 (SUBQUERY)
  -> 하나의 SQL 문 안에 포함되어 있는 또 다른 SQL문
  -> 알려지지 않은 조건에 근거한 값들을 검색하는 SELECT 문장을 작성하는데 유용함
  -> 메인 쿼리가 서브 쿼리를 포함하는 종속적인 관계
  -> 서브쿼리는 반드시 소괄호로 묶어야 함
              -(SELECT .... FRIOM ....) 형태
  -> 서브쿼브는 연산자의 오른쪽에 위치 해야 함
  -> 서브쿼리 내에서 ORDER BY 문법은 지원 안됨 (최종 결과물은 메인 쿼리 이므로)

  @ 서브쿼리 (SUBQUERY)의 유형
  1. 단일행 서브쿼리
  2. 다중행 서브쿼리
  3. 다중열 서브쿼리
  4. 다중행 다중열 서브쿼리
  5. 상관 서브 쿼리
  6. 스칼라 서브쿼리

  @ 단일행 서브쿼리
  -> 서브쿼리의 조회 결과 값(행 혹은 튜플)의 개수가 1개 일 때

  ex)
  /* 평균 급여 이상인 월급 도둑놈들 */
  SELECT EMP_ID "사번", EMP_NAME "이름", JOB_CODE "직급코드", TO_CHAR(SALARY, 'L999,999,999') "급여"
  FROM EMPLOYEE
  WHERE SALARY > (SELECT AVG(SALARY) FROM EMPLOYEE);


  @ 다중행 서브쿼리
  -> 서브쿼리의 조회 결과 값 (행 또는 튜플)이 여러개 일 때
  -> 다중 서브쿼리 앞에는 일반 비교연산자는 사용 불가
                - 사용 가능 연산자 : IN / NOT IN / ANY, ALL, EXTIST

  IN : 쿼리의 비교 조건이 결과 중에서 하나라도 일치하는것
  ex) SELECT * FROM EMPLOYEE WHERE DEPT_CODE IN ('D9', 'D5');
  ※ DEPT_CODE가 'D9' 이거나 'D5' 인것 (OR와 같음)

  NOT IN : 쿼리의 비교 조건이 결과 중에서 하나라도 일치하지 않는 것
   ex) SELECT * FROM EMPLOYEE WHERE DEPT_CODE NOT IN ('D9', 'D5');
   ※ DEPT_CODE가 'D9'가 아니거나 'D5' 가 아닌것
