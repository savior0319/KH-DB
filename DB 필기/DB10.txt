
  @ PL/SQL
  -> Procedural Language Extension TO SQL의 약자
  -> 오라클 자체에 내장되어 있는 절차적 언어로써, SQL의 단점을 보완하여
  SQL 문장내에서 변수의 정의, 조건처리, 반복처리 등을 지원함

  @ PL/SQL의 유형
  -> PL/SQL의 유형은 Anonymous Block(익명 블록), Procedure(프로시저),
    Function(함수)가 있음

  -> Anonymous Block
    - 이름 없는 블록이라 불리며 간단한 block 수행시 사용 됨 (1회용)

  -> Procedure
    -> 지정된 특정 처리를 실행하는 서브 프로그램의 한 유형으로 단독으로 실행되거나
    다른 프로시저나 다른 룰 (Oracle Developer, sqlplus) 등에 의해 호출되어 실행 됨

  -> 함수
    -> 프로시저와 수행되는 결과가 유사하나 값을 반환하는 형태
    -> 프로시저는 리턴값이 없지만 함수는 리턴 값(반환 값)이 있음

  @ PL/SQL 블록 문법

  DECLARE [선언부]
  BEGIN [실행부]
  EXCEPTION [예외처리부]
  END;
  /

  DECLARE SECTION (선언부) - 선택
  -> 변수나 상수를 선언하는 부분
  -> DECLARE로 시작 함
  -> 선택 사항이기 때문에 선언할 변수가 없다면 생략 해도 됨

  EXECUTABLE SECTION (실행부) - 필수
  -> 제어문, 반복문, 함수 정의 등 로직을 기술하는 부분
  -> BEGIN으로 시작 함
  -> 블록내에서 실제 코드를 실행하는 핵심적인 부분

  EXCEPTION SECTION (예외 처리부) - 선택
  -> 예외사항 발생시 해결하기 위한 문자 기술
  -> 자바의 EXCEPTION과 비슷함
  -> EXCEPTION으로 시작함

  END;
  -> 블록의 종료를 의미

  /
  -> PL/SQL 종료 및 실행을 의미

  ## 기본 PL/SQL ##
  BEGIN
  DBMS_OUTPUT.PUT_LINE('HELLO ORACLE');
  END;
  /

  ## 설명 ##
  DBMS_OUTPUT.PUT_LINE -> 출력하는 함수

  ## 기본 설정 ##
  SET SERVEROUTPUT ON;
  -> 프로시저를 사용하여 출력하는 내용을 화면에 보여주도록 설정하는 환경 변수
  -> DEFAULT 값은 OFF 이기 때문에 ON으로 변경해주어야 출력 가능

  @ PL/SQL 작성 요령
  -> PL/SQL 블록 내에서는 한 문장을 종료할 때마다 세미콜론(;)을 사용
  -> END 뒤에 세미콜론(;)을 사용하여 하나의 블록이 끝났다는 것을 명시함
  -> 쿼리문을 수행하기 위해서 /가 입력되어야 하며, PL/SQL 블록은 행에 / 가있으면 종결된
  것으로 간주함

  ## DECLARE 및 EXCEPTION을 선언한 PL/SQL 사용 해보기 ##

    /* 문제
  해당 사원의 사원번호를 입력시
  이름, 부서코드, 직급코드이 출력되도록 PL/SQL로 만들어 보시오
  */
  DECLARE
      NAME VARCHAR2(20);
      DEPTCODE VARCHAR2(20);
      JOBCODE VARCHAR2(10);
  BEGIN
      SELECT EMP_NAME, DEPT_CODE, JOB_CODE
      INTO NAME, DEPTCODE, JOBCODE
      FROM EMPLOYEE
      WHERE EMP_ID LIKE '&EMP_ID';
      DBMS_OUTPUT.PUT_LINE(NAME);
      DBMS_OUTPUT.PUT_LINE(DEPTCODE);
      DBMS_OUTPUT.PUT_LINE(JOBCODE);
  EXCEPTION
      WHEN NO_DATA_FOUND
      THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
  END;
  /

  /* 문제
  해당 사원의 사원번호를 입력시
  이름, 부서명, 직급명이 출력되도록 PL/SQL로 만들어 보시오
  */
  DECLARE
      NAME VARCHAR2(20);
      DEPTNAME VARCHAR2(20);
      JOBNAME VARCHAR2(10);
  BEGIN
      SELECT EMP_NAME, DEPT_TITLE, JOB_NAME
      INTO NAME, DEPTNAME, JOBNAME
      FROM EMPLOYEE E , DEPARTMENT , JOB J
      WHERE E.EMP_ID LIKE '&EMP_ID'
      AND E.DEPT_CODE = DEPT_ID(+)
      AND E.JOB_CODE = J.JOB_CODE;
      DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
      DBMS_OUTPUT.PUT_LINE('부서명 : ' || DEPTNAME);
      DBMS_OUTPUT.PUT_LINE('직급명 : ' || JOBNAME);
  EXCEPTION
      WHEN NO_DATA_FOUND
      THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
  END;
  /

  ## 변수 선언

변수명 [CONSTANT] 자료형(바이트크기) [NOT NULL] [:=초기값];

-- CONSTANT : 값을 변경하지 못하게 함 (상수형태)
-- NOT NULL : 반드시 값 지정, NULL 사용 못함
-- 초기값에 계산식 사용도 가능함

ex)
DECLARE
	DATA NUMBER := 100;
-> DATA 변수를 선언과 동시에 초기값 100을 대입
## 변수에 값 대입 ##
변수명 := 값;

ex)
DECLARE
	DATA1 NUMBER;
	DATA2 NUMBER := 200;
BEGIN
	DATA1 := 100;
	DBMS_OUTPUT.PUT_LINE(DATA1);
	DBMS_OUTPUT.PUT_LINE(DATA2);

@ 변수의 자료형

## 기본자료형 ##

문자형 : VARCHAR2
숫자형 : NUMBER
날짜 : DATE
부울형 : BOOLEAN

## 복잡 자료형 ##
레코드(Record)

@ 변수의 종류
-> PL/SQL 변수는 일반(스칼라)변수, 상수, %TYPE, $ROWTYPE, 레코드(Record) 등이 있음

## 스칼라 변수(일반 변수) : 기존 SQL의 자료형과 유사함
사용방법 : 변수명 데이터타입(바이트) [:= 초기값];

ex1)
    END NUMBER;
    EMP_NAME VARCHAR2(10);

ex2)
DECLARE
    NAME VARCHAR2(10) := '홍길동';
    AGE NUMBER(4) := 20;
    ADDR VARCHAR2(50) := '경기도';
BEGIN
    DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
    DBMS_OUTPUT.PUT_LINE('나이 : ' || AGE);
    DBMS_OUTPUT.PUT_LINE('주소 : ' || ADDR);
EXCEPTION
    WHEN NO_DATA_FOUND
    THEN DBMS_OUTPUT.PUT_LINE('NO DATA');
END;
/

## 상수 ##
-> 일반 변수와 유사하나 CONSTANT라는 키워드가 자료형 앞에 붙고 선언 시에 값을 할당해 주어야 함

사용방법 : 변수명 CONSTANT 데이터타입 := 초기 값;

ex)
  USER_NAME CONSTANT VARCHAR2(20) := '홍길동';



## 참조(REFERENCE)형 변수 ##
  -> 이전에 선언된 다른 변수 또는 테이블의 컬럼 자료형에 맞추어 변수를 선언
  하기 위한 변수

  ex)
  DECLARE
      ID VARCHAR2(20);
      NAME NUMBER;
  BEGIN
      SELECT EMP_ID, EMP_NAME
      INTO ID,NAME
      FROM EMPLOYEE
      WHERE EMP_NAME='선동일';
      DBMS_OUTPUT.PUT_LINE('ID : ' || ID);
      DBMS_OUTPUT.PUT_LINE('NAME : ' || NAME);
  END;
  /

  위 코드는 에러가 발생함 (EMP_NAME은 문자열 데이터지만 NAME 변수는 NUMBER형 이기 때문)

  -> 변수 선언시 모든 컬럼에 따른 데이터 타입을 외우기는 힘듦
  -> 참조형 변수를 사용하면 해당 컬럼에 맞는 데이터 타입을 가진 변수를 선언할 수 있음

  ## %TYPE 속성을 사용한 참조 변수 ##

  사용방법 : 변수명 테이블.컬럼명%TYPE;

  ex)
    %TYPE 으로 특정 테이블 컬럼의 자료형을 참조하는 레퍼런스 변수를 만들 수 있음
    EMPNO EMPLOYEE.EMP_NO%TYPE;
    EMPNAME EMPLOYEE.EMP_NAME은%TYPE;

  ->  %TYPE 속성을 사용하여 선언한 EMPNO 변수는 해당 테이블의 해당 컬럼과 자료형을
  그대로 참조해서 만들어진 변수
  -> 컬럼의 자료형이 변경된다 하여도 PL/SQL 구문을 변경할 필요 없이 바로 적용되어 사용 할 수 있음

  ex)
    /*
    참조형 변수 (%TYPE)
    */
    DECLARE
        ID EMPLOYEE.EMP_ID%TYPE; -- EMPLOYEE 테이블의 EMP_ID 자료형을 사용
        NAME EMPLOYEE.EMP_NAME%TYPE; -- EMPLOYEE 테이블의 EMP_NAME 자료형을 사용
        NO EMPLOYEE.EMP_NO%TYPE; -- EMPLOYEE 테이블의 EMP_NO 자료형을 사용
        SALARY EMPLOYEE.SALARY%TYPE; -- EMPLOYEE 테이블의 EMP_SALARY 자료형을 사용
        HIRE_DATE EMPLOYEE.HIRE_DATE%TYPE; -- EMLOYEE 테이블의 EMP_HIRE_DATE 자료형을 사용
    BEGIN
        SELECT EMP_ID, EMP_NAME, EMP_NO, SALARY, HIRE_DATE
        INTO ID, NAME, NO, SALARY, HIRE_DATE
        FROM EMPLOYEE
        WHERE EMP_NAME LIKE '&사원명';
        DBMS_OUTPUT.PUT_LINE('사원번호 : ' || ID);
        DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
        DBMS_OUTPUT.PUT_LINE('주민번호 : ' || NO);
        DBMS_OUTPUT.PUT_LINE('급여 : ' || SALARY);
        DBMS_OUTPUT.PUT_LINE('입사일 : ' || HIRE_DATE);
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
    END;
    /

  @ %ROWTYPE 속성 #
  -> %TYPE이 컬럼 단위 참조라면, 행(ROW) 단위로 참조하는 %ROWTYPE 속성도 있음
  -> 테이블을 참조하는 변수가 됨

  ex)
      EMP EMP%ROWTYPE;
  -> 특정 테이블의 컬럼 개수나 데이터 형식을 몰라도 지정 할 수 있음
  -> SELECT 문장으로 행을 검색할 때 편리함

  -> %TYPE과 유사하게 참조할 테이블의 컬럼 데이터 타입을 자동적으로 가져오나
  1개의 컬럼 형태가 아닌 여러개의 컬럼 값을 자동으로 가져오는 역할을 함

  사용 방법 : 변수명 테이블%ROWTYPE;

  ## 레코드 (RECORED) 변수 ##
  -> %ROWTYPE이 참조할 테이블의 컬럼 데이터 타입을 자동으로 가져오는 반면
  RECORE는 직접적으로 컬럼 타입을 지정해 줄 수 있음

  사용방법 : TYPE 레코드 타입명 IS RECORE (변수명 변수타입, 변수명 변수타입, ......);

    레코드 객체명 레코드 타입명;

  ex)

  DECLARE
  TYPE MY_ROW_TYPE IS RECORD(
    ID EMPLOYEE.EMP_ID%TYPE,
    NAME VARCHAR2(20),
    SALARY EMPLOYEE.SALARY%TYPE
  );
  EMP MY_ROW_TYPE;
  BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY
    INTO EMP.ID, EMP.NAME, EMP.SALARY
    FROM EMPLOYEE
    WHERE EMP_ID LIKE '200';
    DBMS_OUTPUT.PUT_LINE('사원번호 : ' || EMP.ID);
    DBMS_OUTPUT.PUT_LINE('이름 : ' || EMP.NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : ' || EMP.SALARY);
  END;
  /
