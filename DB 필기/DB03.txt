
@ LENGTH
-> 주어진 컬럼 값 / 문자열의 길이 (문자 개수)를 반환하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                     리턴값 타입          파라미터 (인자 값)
──────────────────────────────────────────────────────────────────────────────────────────────────
LENGTH(COL | STRING)       NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT LENGTH (EMP_NAME)
FROM EMPLOYEE;


@ LENGTHB
-> 주어진 컬럼 값/문자열의 길이(BYTE)를 반환하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                     리턴값 타입          파라미터 (인자 값)
──────────────────────────────────────────────────────────────────────────────────────────────────
LENGTHB(COL | STRING)      NUMBER              CHARACTER 타입의 컬럼 또는 임의의 문자열
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT EMP_NAME, LENGTH(EMP_NAME), LENGTHB(EMP_NAME)
FROM EMPLOYEE;

@ INSTR
-> 찾는 문자(열)이 지정한 위치부터 지정한 횟수만큼 나타난 시작 위치를 반환

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법
──────────────────────────────────────────────────────────────────────────────────────────────────
INSTR(STRING, STR, [POSITION, [OCCURRENCE]])     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터              설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING              문자타입 컬럼 또는 문자열
STRING              찾으려는 문자(열)
POSITION            찾을 위치 시작 값(기본값 1)
                    POSTION > 0 : STRING의 시작부터 끝 방향으로 찾음
                    POSTION < 0 : STRING의 끝부터 시작 방향으로 찾음

OCCURRENCE          검색된[STR의 순번(기본값 1), 음수 사용 불가]
──────────────────────────────────────────────────────────────────────────────────────────────────

※ 시작위치의 INDEX 값은 0이 아닌 1부터 시작임

ex)
SELECT  INSTR('aha aaA HaHa', 'H', 1, 1) AS "INSTR"
FROM DUAL;

@ LPAD / RPAD
-> 주어진 컬럼 문자열에임의의 문자열을 왼쪽 / 오른쪽에 덧붙여 길이 길이 K의 문자열을
반환하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                   리턴 값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
LPAD(STRING, N, [STR]/RPAD(STRING, N, (STR))             CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                                   설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING                                             문자 타입 컬럼 드는 문자열
N                                                  반환할 문자(열)의 길이(바이트)
                                                   원래 STRING 길이보다 작다면 N만큼 잘라서 표시
STR                                                덧붙이려는 문자(열), 생략 시 공백 문자
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
  -- 왼쪽 패딩
  SELECT LPAD('mslove', 20, '@') AS "LPAD"
  FROM DUAL;

  SELECT LPAD(EMAIL, 20, ' ') AS "LPAD"
  FROM EMPLOYEE;


@ LTRIM / RTRIM
-> 주어진 컬럼이나 문자열의 왼쪽 혹은 오른쪽에서 지정한 STR에 포함된 모든 문자를 제거한 나머지를 반환한

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                  리턴 값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
LTRIM(STRING, STR) / RTRIM(STRING, STR)                CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파리미터                                                  설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING                                             문자 타입 컬럼 또는 문자열
STR                                                제거하려는 문자(열), 생략하면 공백문자
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
  SELECT LTRIM('           KHLOVE', ' ') AS "LTRIM"
  FROM DUAL;

  SELECT LTRIM('0000000000HAHA', '0') AS "LTRIM"
  FROM DUAL;

  SELECT LENGTH(LTRIM('____MSLOVE', '_')) AS "TRIM and LENGTH"
  FROM DUAL;

  SELECT LTRIM('1121321231231', '123') AS "LTRIM"
  FROM DUAL;

  SELECT RTRIM('1234', '4') AS "RTRIM"
  FROM DUAL;

@ TRIM
-> 주어진 컬럼이나 문자열의 앞/뒤/양쪽에 있는 지정한 문자를 제거하여 나머지를 반환


──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                  리턴 값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
TRIM(STRING)                                            CHARACTER
TRIM(CHAR FROM STRING)                                  CHARACTER
(CHAR를 작성하지 않으면 기본적으로 공백을 삭제하라는 의미)
(위치 앞 또는 뒤를 지정하지 않으면 기본적으로 BOTH)

TRIM(LEADING | TRAILING | BOTH [CHAR] FROM STRING)     	CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────


──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터		                     	설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING		           	  문자 타입 컬럼 또는 문자열
CHAR			              제거하려는 문자, 생략하면 공백문자
			                   ※ TRIM은 문자 1글자만 가능
LEADING		              TRIM할 CHAR의 위치를 지정
			                  앞(LEADING), 뒤(TRAILING), 양쪽(BOTH) 지정 가능 (기본값은 양쪽)
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT TRIM('  KH  ') AS "TRIM"
FROM DUAL;

SELECT TRIM('1' FROM '1KH1') AS "TRIM"
FROM DUAL;

SELECT TRIM(LEADING '1' FROM '1KH1') AS "TRIM"
FROM DUAL;

SELECT TRIM(TRAILING '1' FROM '1KH1') AS "TRIM"
FROM DUAL;

SELECT TRIM(BOTH '1' FROM '1KH1') AS "TRIM"
FROM DUAL;


@ SUBSTR
-> 컬럼이나 문자열에서 지정한 위치부터 지정한 개수의 문자열을 잘라내어 리턴하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
SUBSTR(STRING, POSTION,[LENGTH])           CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                    설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING                              문자 타입 컬럼 또는 문자열

POSTION                             문자열을 잘라낼 위치 양수이면 시작 방향에서 지정한 수 숫자만큼의
                                    위치를 의미 음수이면 끝 방향에서 지정한 수 만큼의 위치를 의미

                                    반환할 문자의 개수를 의미
LENGTH                              (생략시 문자열의 끝까지를 의미. 음수이면 NULL을 리턴)
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT SUBSTR('SHOWMETHEMONEY', 5, 2) AS "SUBSTR"
FROM DUAL;

SELECT SUBSTR('SHOWMETHEMONEY', 5) AS "SUBSTR"
FROM DUAL;

SELECT SUBSTR('SHOWMETHEMONEY', 1, 6) AS "SUBSTR"
FROM DUAL;

SELECT SUBSTR('SHOWMETHEMONEY', -8, 3) AS "SUBSTR"
FROM DUAL;

SELECT EMP_NAME "NAME", SUBSTR(EMP_NO, 1, 6) "BIRTH"
FROM EMPLOYEE;

@ LOWER / UPPER / INICAP

-> 컬럼의 문자 혹은 문자열을 소문자 / 대문자/ 단어별 첫 글자만 대문자로 변환하여
리턴하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
LOWER(STRING) / UPPER(STRING) / INITCAP(STRING)            CHARACTER
LOWER : 소문자
UPPER : 대문자
INITCAP : 각 단어 별 첫 글자만
──────────────────────────────────────────────────────────────────────────────────────────────────


──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                    설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING                              문자 타입 컬럼 또는 문자열
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT UPPER('Welcome To My Oracle World') as "UPPER"
FROM DUAL;

SELECT LOWER('Welcome To My Oracle World') as "LOWER"
FROM DUAL;

SELECT INITCAP('welcome to my oracle world') as "INITCAP"
FROM DUAL;

@ CONCAT
-> 컬럼의 문자 혹은 문자열을 두 개 전달 받아 하나로 합친 후 리턴하는 함수
-> || 와 같음
-> 만약에 3개 이상의 컬럼 (문자열 타입, 숫자 타입, 날짜 타입)을 결합 할 때에는 ||를 권장


──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
CONCAT(STRING, STRING)                                     CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────


──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                    설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING                              문자 타입 컬럼 또는 문자열
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT CONCAT('A', '1') AS "CONCAT"
FROM DUAL;

SELECT 'A' || '1' || '2' AS "||"
FROM DUAL;

@ REPLACE
-> 컬럼의 문자 혹은 문자열을 두 개 (변경할, 변경될)의 문자열 갑을 전달 받아
변경 후 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
REPACE(STRING, STR1, STR2)                                 CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                    설명
──────────────────────────────────────────────────────────────────────────────────────────────────
STRING                              문자 타입 컬럼 또는 문자열
STR1                                변경 대상이 되는 문자 혹은 문자열
STR2                                변경 할 문자 혹은 문자열
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
    SELECT REPLACE ('Hello World', 'Hello', 'Hell' ) AS "REPLACE"
    FROM DUAL;


 @ 숫자 처리 함수
================================================================================
|  구분	|	입력값 타입	|	리턴값 타입	|		설명		                            |
================================================================================
|ABS  	|			        |			       |절대값을 구하여 리턴한다.	              |
|-------| 	  		| 			|-----------------------------------|
|MOD	  |			        |		         |입력받은 수를 나눈 나머지 값을 반환       |
|-------|			| 			|-----------------------------------|
|ROUND	|	NUMBER		  |	NUMBER		 |특정 자릿수에서 반올림		               |
|-------|			| 			|-----------------------------------|
|FLOOR	|			        |		         |소수점 아래를 잘라내고 리턴(버림)         |
|-------|			| 			|-----------------------------------|
|TRUNC	|			        |		         |특정 자릿수에서 잘라내고 리턴(버림)       |
|-------|			| 			|-----------------------------------|
|CEIL	  |			        |			       |지정한 자릿수에서 올림하여 리턴           |
--------------------------------------------------------------------------------


 @ ABS
 -> 인자로 전달 받은 숫자의 절대 값을 구하는 함수
 ──────────────────────────────────────────────────────────────────────────────────────────────────
 작성법                                                     리턴값 타입
 ──────────────────────────────────────────────────────────────────────────────────────────────────
 ABS(NUMBER)                                                NUMBER
 ──────────────────────────────────────────────────────────────────────────────────────────────────

 ex)
 SELECT ABS(-1), ABS(1)
 FROM DUAL;


@ MOD
-> 인자로 전달받은 숫자를 나누어 나머지를 구하는 함수
──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
NUMBER                                                     NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                    설명
──────────────────────────────────────────────────────────────────────────────────────────────────
NUMBER                              숫자 혹은 숫자 데이터 컬럼
DIVISION                            나눌 수(값) 혹은 나눌 숫자 데이터 컬럼
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT MOD(10, 3)  AS "MOD"
FROM DUAL;

@ ROUND
-> 인자로 전달 받은 숫자 혹은 컬럼에서 지정한 위치 이후 값을 반올림하여 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
ROUND(NUMBER)                                               NUMBER
ROUND(NUMBER, POSITION)                                     NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                    설명
──────────────────────────────────────────────────────────────────────────────────────────────────
NUMBER                              숫자 혹은 숫자 데이터 컬럼
POSITION                            반올림 할 자리 위치
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT ROUND(123.456, 2) AS "ROUND"
FROM DUAL;

SELECT ROUND(123.456, -1) AS "ROUND"
FROM DUAL;

SELECT ROUND(123.456, -2) AS "ROUND"
FROM DUAL;

@ FLOOR
-> 인자로 전달 받은 숫자 혹은 컬럼의 소수점 자리 수를 버리는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
FLOOR(NUMBER)                                               NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
NUMBER                              숫자 혹은 숫자 데이터 컬럼
──────────────────────────────────────────────────────────────────────────────────────────────────

@ TRUNC
-> 인자로 전달 받은 숫자 혹은 컬럼의 지정한 위치 이후 소수점 자리 수를 버리는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
TRUNC(NUMBER, POSITION)                                    NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
NUMBER                              숫자 혹은 숫자 데이터 컬럼
POSITION                            버림 할 위치 자리
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT TRUNC(123.456, 2) AS "TRUNC"
FROM DUAL;

SELECT TRUNC(123.456, -1) AS "TRUNC"
FROM DUAL;

SELECT TRUNC(123.456, -2) AS "TRUNC"
FROM DUAL;

@ CEIL
-> 인자로 전달 받은 숫자 혹은 컬럼을 올림 계산하여 나온 값을 리턴 하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
CEIL(NUMBER)                                               NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
NUMBER                              숫자 혹은 숫자 데이터 컬럼
──────────────────────────────────────────────────────────────────────────────────────────────────


@ SYSDATE
-> 시스템에 저장되어 있는 현재 날짜를 반환하는 함수

ex)
SELECT SYSDATE
FROM DUAL;

※ 그 외 현재 시각을 알려주는 명령어
CURRENT_DATE, LOCALTIMESTAMP, CURRENT_TIMESTAMP
SELECT CURRENT_DATE FROM DUAL;
SELECT LOCALTIMESTAMP FROM DUAL;
SELECT CURRENT_TIMESTAMP FROM DUAL;

@ MONTHS_BETWEEN
-> 인자로 날짜 두 개를 전달받아, 개월 수의 차이를 숫자 데이터형으로 리턴하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
MONTHS_BETWEEN(DATE1, DATE2)                               NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
DATE1                              기준이 되는 날짜를 입력
DATE2                              개월 수를 구하려는 날짜를 입력
──────────────────────────────────────────────────────────────────────────────────────────────────

@ ADD_MONTHS
-> 인자로 전달 받은 날짜에 인자로 전달 받은 숫자만큼 개월 수를 더하여 특정 날짜를 리턴하는 함수

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
ADD_MONTHS(DATE, NUMBER)                                   DATE
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
DATE                               기준이 되는 날짜를 입력
NUMBER                             더하려는 개월 수를 입력
──────────────────────────────────────────────────────────────────────────────────────────────────

@ NEXT_DAY
-> 인자로 전달받은 날짜에 인자로 전달받은 요일 중 가장 가까운 다음 요일을 출력

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
NEXT_DAY(DATE, STRING [OR NUMBER])                          DATE
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
DATE                               기준이 되는 날짜를 입력
STRING[OR NUMBER]                  구하려는 요일을 입력함
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT SYSDATE, NEXT_DAY (SYSDATE, '월요일') AS "NEXT_DAY"
FROM DUAL;

SELECT SYSDATE, NEXT_DAY (SYSDATE, 1) AS "NEXT_DAY"
FROM DUAL;

SELECT SYSDATE, NEXT_DAY (SYSDATE, '월') AS "NEXT_DAY"
FROM DUAL;

@ LAST_DAY
-> 인자로 전달받은 날짜가 속한 달의 마지막 날짜를 구하여 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                     리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
LAST_DAY(DATE)                                             DATE
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
DATE                               기준이 되는 날짜를 입력
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT LAST_DAY(SYSDATE)
FROM DUAL;

@ EXTRACT
-> 년, 월, 일 정보를 추출하여 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                             리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
EXTRACT(YEAR FROM SYSDATE)                                            DATE
EXTRACT(MONTH FROM SYSDATE)                                           DATE
EXTRACT(DAY FROM SYSDATE)                                             DATE
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                       설명
──────────────────────────────────────────────────────────────────────────────────────────────────
DATE                               기준이 되는 날짜를 입력
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT EXTRACT(YEAR FROM SYSDATE)
FROM DUAL;

@ 형 변환 함수

@ TO_CHAR
-> 날짜형 데이터를 문자형 데이터로 변환하거나, 숫자데이터를 문자형 데이터로 반환하여 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                       리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
TO_CHAR(DATE, [FORMAT])                      DATE
TO_CHAR(NUMBER, [FORMAT])                    NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                            설명
──────────────────────────────────────────────────────────────────────────────────────────────────
DATE                                문자형으로 반환하려는 날짜형 데이터
NUMBER                              문자형으로 반환하려는 숫자형 데이터
FORMAT                              문자형으로 반환 시 저장되는 출력 형식
──────────────────────────────────────────────────────────────────────────────────────────────────

날짜 -> 숫자
──────────────────────────────────────────────────────────────────────────────────────────────────
형식
──────────────────────────────────────────────────────────────────────────────────────────────────
YYYY                                년도표현(4자리)
YY                                  년도표현(2자리)
MONTH                               월 표시
MM                                  월을 숫자로 표현
MONTH                               월을 알파벳으로 표현
DD                                  날짜 표현
D                                   요일을 숫자로 표현
DAY                                 요일 표현
DY                                  요일을 약어로 표현
──────────────────────────────────────────────────────────────────────────────────────────────────
HH, HH12                            시간(12시간으로 표현)
HH                                  시간(24시간으로 표현)
M                                   분
S                                   초
──────────────────────────────────────────────────────────────────────────────────────────────────
AM, PM                              오전, 오후 표기
FM                                  월,일,시,분,초 앞의 0을 제거
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD') AS "TO CHAR"
FROM DUAL;

숫자 -> 문자
──────────────────────────────────────────────────────────────────────────────────────────────────
FORMAT              예시            설명
──────────────────────────────────────────────────────────────────────────────────────────────────
.(comma)            9.999           콤마 형식으로 변환
.(period)           99.99           소수점 형식으로 변환
0                   09999           왼쪽에 0을 삽입
$                   $9999           $통화로 표시
L                   L9999           Local 통화로 표시
──────────────────────────────────────────────────────────────────────────────────────────────────

-> 숫자 표시 단위는 충분한 크기를 주어야 함
-> 변환될 숫자의 길이보다 포맷의 길이가 작으면 정상 표시가 안됨
-> 0과 9를 이용하여 최대 자리수를 표현 해야 함

ex)
SELECT TO_CHAR(1000000000, 'L9,999,999,999') AS "FORMAT"
FROM DUAL;

@ TO_DATE
-> 숫자 혹은 문자형 데이터를 날짜형 데이터로 변환하여 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                        리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
TO_DATE(CHARACTER, [FORMAT])                   DATE
TO_DATE(NUMBER, [FORMAT])                      NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                            설명
──────────────────────────────────────────────────────────────────────────────────────────────────
CHARACTER                           날짜형으로 변환하려는 문자형 데이터
NUMBER                              날짜형으로 변환하려는 숫자형 데이터
FORMAT                              날짜형으로 변환시 입력 포맷 지정
──────────────────────────────────────────────────────────────────────────────────────────────────

※ 포맷형식은 위에 TO_CHAR에 있는것 사용

ex)
SELECT TO_DATE(20010101, 'YYYY/MM/DD') AS "TO_DATE"
FROM DUAL;

SELECT TO_CHAR(TO_DATE(20010101, 'YYYY/MM/DD'), 'YYYY/MM/DD') AS "날짜"
FROM DUAL;

@ TO_NUMBER
-> 날짜 혹은 문자형 데이터를 숫자형 데이터로 변환하여 리턴 함

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                            리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
TO_NUMBER(CHARACTER, [FORMAT])                  DATE, NUMBER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                            설명
──────────────────────────────────────────────────────────────────────────────────────────────────
CHARACTER                           날짜형으로 변환하려는 문자형 데이터
FORMAT                              숫자형으로 변환 시 입력 포맷 지정
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT TO_NUMBER('1,000,000', '9,999,999') - TO_NUMBER('10', '99') AS "TO_NUMBER"
FROM DUAL;

SELECT TO_CHAR(TO_NUMBER('1,000,000', '9,999,999') - TO_NUMBER('10', '99'), '999,999,999') AS "TO_NUMBER AND TO_CHAR"
FROM DUAL;

SELECT TO_NUMBER('a1,000,000', '9,999,999')
FROM DUAL; -- 에러

SELECT TO_NUMBER('$1,000,000', '9,999,999')
FROM DUAL; -- 에러

SELECT TO_NUMBER('$1,000,000', '$9,999,999')
FROM DUAL; -- 정상

@ NULL 처리 함수 - NVL
-> NULL로 되어 있는 컬럼의 값을 지정한 숫자 혹은 문자로 변경하여 리턴

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                 리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
NVL(P1, P2)                                            NUMBER, CHARACTER
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터                                                설명
──────────────────────────────────────────────────────────────────────────────────────────────────
P1				                                              NULL 데이터를 처리할 컬럼명 혹은 값
P2				                                              NULL 값을 변경(대체)하고자 하는 값
──────────────────────────────────────────────────────────────────────────────────────────────────


@ DECODE - 선택 함수
-> 여러 가지 경우에 선택을 할 수 있는 기능을 제공하는 함수 (일치하는 값)

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                        리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
DECODE(표현식, 조건1, 결과1, 조건2, 결과2 ..)                     결과
──────────────────────────────────────────────────────────────────────────────────────────────────

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터			                                             설명
──────────────────────────────────────────────────────────────────────────────────────────────────
표현식			                              값에 따라 선택을 다르게 할 컬럼 혹은 값 입력
조건		                                 해당 값이 참인지 거짓인지 여부를 판단
결과			                               해당 조건과 일치하는 경우 결과를 리턴
DEFAULT		                             	모든 조건이 불일치 시 리턴할 값
──────────────────────────────────────────────────────────────────────────────────────────────────

ex)
SELECT EMP_NAME AS "이름", DECODE(SUBSTR(EMP_NO, 8, 1), '1', '남자', '2', '여자') AS "성별"
FROM EMPLOYEE;

@ CASE
-> 여러가지 경우에 선택을 할 수 있는 기능을 제공함

──────────────────────────────────────────────────────────────────────────────────────────────────
작성법                                                        리턴값 타입
──────────────────────────────────────────────────────────────────────────────────────────────────
CASE
WHEN 조건1 THEN 결과1
WHEN 조건2 THEN 결과2                                          결과
WHEN 조건3 THEN 결과3
ELSE 결과 N
END
──────────────────────────────────────────────────────────────────────────────────────────────────

※ ELSE는 그 외
※ CASE는 끝을 의미하는 END를 붙여 주어여 함

──────────────────────────────────────────────────────────────────────────────────────────────────
파라미터			                                             설명
──────────────────────────────────────────────────────────────────────────────────────────────────
조건                                                해당 값이 참인지 거짓인지 여부를 판단함
결과                                                해당 조건과 일치하는 경우 결과를 리턴함
ELSE                                                모든 조건이 불일치 시 리턴할 값
──────────────────────────────────────────────────────────────────────────────────────────────────

@ 그룹 함수
-> 하나 이상의 행을 그룹으로 묶어 연산하여 총합,평균 등을 하나의 컬럼으로
리턴하는 함수

===============================================
|	구분		|		설명				                    |
===============================================
|	SUM	   |	그룹의 누적 합계를 리턴 함	      	|
|----------------------------------------------
|	AVG		 |	그룹의 평균을 리턴 함			        |
|----------------------------------------------
|	COUNT	 |	그룹의 총 개수를 리턴 함		       |
|----------------------------------------------
|	MAX		 |	그룹의 최대값을 리턴 함			       |
|----------------------------------------------
|	MIN		 |	그룹의 최소값을 리턴 함			       |
===============================================

@ SUM
-> 해당 컬럼 값들의 총 합을 구하는 함수

@ AVG
-> 해당 컬럼 값들의 평균을 구하는 함수

@ COUNT
-> 테이블에서 조건을 만족하는 행의 개수를 반환하는 함수

@ MAX/MIN
-> 그룹의 최대값과 최소값을 구하는 함수
