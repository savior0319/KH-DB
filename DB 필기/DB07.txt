
 @ DDL
 -> 데이터 정의 언어
 -> 객체를 만들고 CREATE, ALTER, DROP하는 구문

 @ 오라클 객체의 종류
 테이블 뷰 시퀸스 인덱스 패키지 프로시져 함수 트리거 동의어 사용자가 있음

 @ CREATE 테이블 만들기

  표현식
  ORACLE TABLE 테이블명(컬럼명 자료형(크기), 컬럼명 자료형(크기), ...);

  ex)
  CREATE TABLE MEMBER(
  MEMBER_ID VARCHAR2(20),
  MEMBER_PWD VARCHAR2(20),
  MEMBER_NAME VARCHAR2(20)
  )


  @ 컬럼 주석

  ex)
  /* 컬럼 주석 */
  COMMENT ON COLUMN MEMBER.MEMBER_ID IS
  '회원아이디';
  COMMENT ON COLUMN MEMBER.MEMBER_PWD IS
  '회원비빌번호';
  COMMENT ON COLUMN MEMBER.MEMBER_NAME IS
  '회원이름';

  @ 제약 조건 (CONSTRAINTS)
  -> 테이블 작성 시 (생성 시) 각 컬럼에 대한 제약 조건을 설정 할 수 있음
  -> 데이터 무결성을 지키기 위해 제한된 조건
      -> 데이터 무결성 : 데이터의 정확성과 일관성을 유지하기 위한 것

  NOT NULL : 데이터에 NULL을 허용하지 않음
  UNIQUE : 중복된 값을 허용하지 않음
  PRIMARY KEY : NULL을 허용하지 않고 중복 값을 허용하지 않음
  FOREIGN KEY : 두 테이블의 데이터간 연결을 설정하고 강제 적용하여 외래키 테이블에 저장될 수 있는 데이터를 제어함
  CHECK : 저장 가능한 데이터 값의 범위나 조건을 지정하여 설정한 값만 허용 함


  @ 제약 조건 정보 확인

  SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE FROM USER_CONSTRAINTS
  WHERE TABLE_NAME = '테이블명';

  ※ CONSTRAINT_TYPE
      P : PRIMARY KEY
      R : FOREIGN KEY
      C : CHECK 또는 NOT NULL
      U : UNIQUE

  ex)
    /* 테이블 제약조건 확인 */
    SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
    FROM USER_CONS_COLUMNS
    WHERE TABLE_NAME = 'USER_NOTCONS'
    UNION
    SELECT TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE
    FROM USER_CONSTRAINTS
    WHERE TABLE_NAME = 'USER_NOTCONS';

  @ NOT NULL
  -> 해당 컬럼에 반드시 값이 기록되어야 하는 경우, 특정 컬럼에 값을 저장하거나 수정할 때
  NULL 값을 허용하지 않도록 컬럼 레벨에서 제한함

  ## 테이블 생성 시 제약조건을 설정하지 않고 생성

    CREATE TABLE USER_NOTCONS
    (
      USER_NO NUMBER,
      USER_ID VARCHAR2(20),
      USER_PWD VARCHAR2(30),
      USER_NAME VARCHAR2(30),
      GENDER VARCHAR2(30),
      PHONE VARCHAR2(30),
      EMAIL VARCHAR2(50)
    );

  -> 아무런 제약조건이 명시 되지 않으면 제한 없는 데이터 혹은 데이터를 넣지 않고도 INSERT가 가능해짐

  ※ INSERT INTO USER_NOTCONS
    VALUES(1, NULL, NULL, NULL, NULL, NULL, NULL);

    ex) NOT NULL 제약조건
    /* USER_NOTCONS 테이블 생성 (NOT NULL 제약조건)*/
    CREATE TABLE USER_NOTCONS
    (
      USER_NO NUMBER NOT NULL,
      USER_ID VARCHAR2(20) NOT NULL,
      USER_PWD VARCHAR2(30) NOT NULL,
      USER_NAME VARCHAR2(30) NOT NULL,
      GENDER VARCHAR2(30) NOT NULL,
      PHONE VARCHAR2(30) NOT NULL,
      EMAIL VARCHAR2(50)  NOT NULL
    );

    ※ NOT NULL 제약조건이 있는 컬럼에 NULL 데이터 삽입 시 오류 발생

    @ UNIQUE
    -> 컬럼 입력 값에 대해 중복을 제한하는 제약 조건
    -> 컬럼 레벨과 테이블 레벨에 설정 가능

    ## 제약 조건 설정 ##
    ex)
    /* USER_NOTCONS 테이블 생성 (NOT NULL, UNIQUE(USER_ID) (컬럼레벨) 제약조건)*/
    CREATE TABLE USER_NOTCONS
    (
      USER_NO NUMBER NOT NULL,
      USER_ID VARCHAR2(20) NOT NULL UNIQUE,
      USER_PWD VARCHAR2(30) NOT NULL,
      USER_NAME VARCHAR2(30) NOT NULL,
      GENDER VARCHAR2(30) NOT NULL,
      PHONE VARCHAR2(30) NOT NULL,
      EMAIL VARCHAR2(50)  NOT NULL
    );
S
    /* USER_NOTCONS 테이블 생성 (NOT NULL, UNIQUE(USER_ID) (테이블 레벨 설정)제약조건)*/
    CREATE TABLE USER_NOTCONS
    (
      USER_NO NUMBER NOT NULL,
      USER_ID VARCHAR2(20) NOT NULL,
      USER_PWD VARCHAR2(30) NOT NULL,
      USER_NAME VARCHAR2(30) NOT NULL,
      GENDER VARCHAR2(30) NOT NULL,
      PHONE VARCHAR2(30) NOT NULL,
      EMAIL VARCHAR2(50)  NOT NULL,
      UNIQUE(USER_ID)
    );

    -> UNIQUE 제약 조건이 설정되면 중복된 데이터를 넣을 수 없음
    -> 하지만 UNIQUE 제약 조건이 설정되었다 하더라도 NULL 값으로 넣게 되면
    데이터가 처리 되어 버림
    -> 해결 방법은 UNIQUE 제약조건과 NOT NULL 제약 조건을 동시에 주는 방법
    혹은 PRIMARY KEY로 설정하는 방법이 있음


    @ PRIMARY KEY
    -> 테이블에서 한 행의 정보를 구별하기 위해 사용하는 고유 식별자 (IDENTIFIER)
    -> NOT NULL 제약조건과 UNIQUE 제약 조건의 의미를 둘 다 가지고 있으며,
    한 테이블당 한개만 설정 가능
    -> 컬럼 레벨, 테이블 레벨에서 지정 가능

    ## PRIMARY KEY - 컬럼 레벨에서 설정
    ex)
      CREATE TABLE USER_NOTCONS
      (
        USER_NO NUMBER PRIMARY KEY,
        USER_ID VARCHAR2(20) UNIQUE,
        USER_PWD VARCHAR2(30) NOT NULL,
        USER_NAME VARCHAR2(30) NOT NULL,
        GENDER VARCHAR2(30) NOT NULL,
        PHONE VARCHAR2(30) NOT NULL,
        EMAIL VARCHAR2(50)  NOT NULL
      );

    ## PRIMARY KEY - 테이블 레벨에서 설정
    ex)
      CREATE TABLE USER_NOTCONS
      (
        USER_NO NUMBER,
        USER_ID VARCHAR2(20) UNIQUE,
        USER_PWD VARCHAR2(30) NOT NULL,
        USER_NAME VARCHAR2(30) NOT NULL,
        GENDER VARCHAR2(30) NOT NULL,
        PHONE VARCHAR2(30) NOT NULL,
        EMAIL VARCHAR2(50)  NOT NULL,
        PRIMARY KEY(USER_NO)
      );

      @ CHECK
      -> 해당 컬럼에 입력되거나 수정되는 값을 체크하여, 설정된 값 이외의 값이면
      에러를 발생
      -> 비교 연산자를 이용하여 조건을 설정할 수 있으며, 비교 값은 리터럴만 사용가능하고 값이 변하는 형태는
      사용 불가능

      ## CHECK 제약조건을 이용하여 GENDER 'M', 'F' 만 가능하게 설정
          -> CHECK 제약조건을 자동으로 NOT NULL 제약조건 ('M', 'F'만 가능하므로)

      ex)
      /* CHECK 제약조건 (GENDER = 'M' OR 'F') */
      CREATE TABLE USER_NOTCONS
      (
            USER_NO NUMBER,
            USER_ID VARCHAR2(20) UNIQUE,
            USER_PWD VARCHAR2(30) NOT NULL,
            USER_NAME VARCHAR2(30) NOT NULL,
            GENDER VARCHAR2(30) CHECK (GENDER IN('F', 'M')),
            PHONE VARCHAR2(30) NOT NULL,
            EMAIL VARCHAR2(50)  NOT NULL,
            PRIMARY KEY(USER_NO)
      );

    -> GENDER 값에  'M', 'F' 만 가능 함
      INSERT INTO USER_NOTCONS
      VALUES(1, 'USER1', 'P@SSw0RD', '이름', 'F', '10-0000-0000', 'EMAIL@EMAIL.MAIL');

      INSERT INTO USER_NOTCONS
      VALUES(2, 'USER2', 'P@SSw0RD', '이름', 'M', '10-0000-0000', 'EMAIL@EMAIL.MAIL');


  @ FOREIGN KEY (외래키)
  -> 참조 무결성을 유지하기 위한 제약 조건
  -> 참조된 다른 테이블이 제공하는 값만 사용할 수 있도록 제한을 거는것
  -> 참조되는 컬럼과 참조된 컬럼을 통해 테이블간의 관계가 형성 됨
  -> 해당 컬럼 값은 참조되는 테이블의 컬럼 값 중의 하나와 일치하거나
    NULL을 가질 수 있음
  -> 일반적으로 참조되는 테이블에서 고유 식별할 수 있는 기본키를 외래키로 사용할 수 있음
    (꼭 기본키로만 설정하는 것은 아님!!)
    ex)

    /* 구매 테이블 생성 */
      CREATE TABLE BUY(
          BUY_NO NUMBER PRIMARY KEY,
          USER_ID VARCHAR2(20),
          PRODUCT_NAME VARCHAR2(20),
          REG_DATE DATE,
          FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID)
      );

    ### 데이터 삭제
    -> 부모 테이블(참조되는)의 데이터 삭제시 자식 테이블(참조하는)의 데이터를
    어떠한 형식으로 처리할지에 대한 내용을 제약조건 설정 시 옵션으로 지정 할 수 있음

    /* 구매 테이블 생성 */
      CREATE TABLE BUY(
          BUY_NO NUMBER PRIMARY KEY,
          USER_ID VARCHAR2(20),
          PRODUCT_NAME VARCHAR2(20),
          REG_DATE DATE,
          FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID)
          ON DELETE SET NULL -- 참조된 값 삭제 시 NULL
      );

  ## CASCADE ##
  -> 연쇄 삭제
  -> 참조하는 값이 없을 시 같이 삭제

 ex)
    /* 참조된 값 CASCADE */
  CREATE TABLE BUY(
      BUY_NO NUMBER PRIMARY KEY,
      USER_ID VARCHAR2(20),
      PRODUCT_NAME VARCHAR2(20),
      REG_DATE DATE,
      FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID)
      ON DELETE CASCADE -- 참조된 값 삭제 시 연쇄삭제
  );

  @ DEFAULT
  -> 테이블 생성 시 DEFAULT 값을 줄 수 있음
  -> DEFAULT로 설정된 컬럼에 데이터를 삽입 할 때에는 DEFAULT로 주면 설정된 기본값으로 적용 됨

  @ SUBQuery를 이용한 CREATE TABLE
  -> 서브쿼리를 이용해서 SELECT한 결과를 이용하여 테이블을 생성하는 방법
  -> 컬럼명과 데이터 타입, 값이 복사되어 테이블이 만들어 지고
  제약 조건은 NOT NULL만 복사 됨
      (제약 조건은 NOT NULL만 복사되므로 나머지 제약조건을 설정하려면
      ALTER 구문을 통하여 추가 및 수정 해 주어야 함)

      ## 만약 직원의 이름, 부서 정보를 가지고 있는 새로운 테이블을
    생성 해야 한다면? ##
    ex)
    CREATE TABLE EMP_DEPT_TBL
    AS
    SELECT EMP_NAME,DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

    ※ 주의할점! 제약 조건은 NOT NULL 제약조건만 복사된다는 것을 꼭 기억하세요 !


  @ DML (Data Manipulation Language)
  -> Data를 조작하기 위해 사용하는 언어
  -> Data의 삽입,수정,삭제,조회 등의 동작을 제어함
  -> Data를 이용하려는 사용자와 시스템 간의 인터페이스를 직접적으로 제공하는 언어
  -> 가장 많이 사용 됨

  @ INSERT
  -> 새로운 데이터(행)를 테이블에 추가하는 구문
  -> 추가할때마다 테이블의 행 개수가 증가함

  사용 구문
  INSERT INTO <테이블명> VALUES (입력데이터1, 입력데이터2, ...);
  혹은
  INSERT INTO <테이블명>(컬럼명1, 컬럼명2, ....) VALUES(입력데이터1, 입력데이터2, ...);

  ex)
  /* DML (INSERT) */
  CREATE TABLE TEST(
  DATA1 NUMBER,
  DATA2 NUMBER,
  DATA3 NUMBER,
  DATA4 NUMBER,
  DATA5 NUMBER
  );

  /* 순서대로 삽입 */
  INSERT INTO TEST
  VALUES(1, 2, 3, 4, 5);

  /* 컬럼명 지정해서 삽입 */
  INSERT INTO TEST(DATA2, DATA1, DATA3, DATA4, DATA5)
  VALUES(2, 1, 3, 4, 5);

  /* NULL 명시 안하고 삽입*/
  INSERT INTO TEST(DATA1, DATA2, DATA3, DATA4)
  VALUES(1, 2, 3, 4);

  ## INSERT시에 서브쿼리를 이용하여 데이터를 삽입할 수 있음 ##

  ex)
  CREATE TABLE EMP_01
  (
      EMP_ID NUMBER,
      EMP_NAME VARCHAR2(30),
      DEPT_TITLE VARCHAR2(20)
  )
  INSERT INTO EMP_01
  (
      SELECT EMP_ID,EMP_NAME,DEPT_TITLE
      FROM EMPLOYEE
      LEFT JOIN DEPARTMENT ON(DEPT_CODE = DEPT_ID)
  );

  @ INSERT ALL
  -> INSERT시 사용하는 서브쿼리가 테이블이 같은 경우, 두 개 이상의
  테이블에 INSERT ALL을 이용하여 한번에 삽입할 수 있음

  /* INSERT ALL */
    CREATE TABLE EMP_DEPT_01 AS
      SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE
      FROM EMPLOYEE
      WHERE 1 = 0;

    CREATE TABLE EMP_MANAGER AS
      SELECT EMP_ID, EMP_NAME, MANAGER_ID
      FROM EMPLOYEE
      WHERE 1 = 0;

    /* EMP_DEPT_01 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을 조회하여 사번, 이름 소속부서, 입사일을 삽입하고,
  (EMP_MANGER) 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을 조회하여 사번, 이름, 관리자 사번을 삽입 해야함

  즉, 가져오는 테이블 명 : EMPLOYEE
  조건 : 부서코드가 D2
  테이블과 조건이 같다면 ! INSERT ALL을 이용하여 한번에 처리가 가능함*/
  INSERT ALL
  INTO EMP_DEPT_01
  VALUES (EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE)
  INTO EMP_MANAGER
  VALUES (EMP_ID, EMP_NAME, MANAGER_ID)
  SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE, MANAGER_ID
  FROM EMPLOYEE
  WHERE DEPT_CODE LIKE 'D2';

  SELECT * FROM EMP_DEPT_01;
  SELECT * FROM EMP_MANAGER;

  @ UPDATE
  -> 테이블에 기록된 컬럼의 값을 수정하는 구문
  -> 테이블의 전체 행 개수에는 변화가 없음
    (기존 데이터를 수정하는 것 뿐)

    ex)
    /* UPDATE */
    CREATE TABLE DEPT_COPY AS
    SELECT * FROM DEPARTMENT;

    UPDATE DEPT_COPY
    SET DEPT_ID = 'D0'
    WHERE DEPT_ID LIKE 'D1' OR DEPT_ID LIKE 'D2';

    UPDATE DEPT_COPY
    SET DEPT_ID = 'D0'
    WHERE DEPT_TITLE LIKE '총무부';

    SELECT * FROM DEPT_COPY;

  @ MERGE
    -> 구조가 같은 두개의 테이블을 하나의 테이블로 합치는 기능
    -> 두 테이블에서 지정하는 조건의 값이 존재하면 UPDATE가 되고,
    조건의 값이 없으면 INSERT 되도록 하는 기능
