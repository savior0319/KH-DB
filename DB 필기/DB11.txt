
  @ PL/SQL 반복문

  ## BASIC LOOP : 조건 없이 무한 반복

  DECLARE
  	i NUMBER := 1;

  BEGIN
  	LOOP+
  		DBMS_OUTPUT.PUT_LINE(i);
  		i := i + 1;
  		IF i > 5 THEN EXIT;
  		END IF;
  	END LOOP;
  END;
  /

  ## FOR LOOP
  -> FOR LOOP는 문법 안에서 변수를 선언하여 사용하므로 미리 선언 할 필요가 없음
  -> 카운트 값은 자동으로 1씩 증가
  -> REVERSE는 1씩 감소

  BEGIN
      FOR I IN 1..5 LOOP
          DBMS_OUTPUT.PUT_LINE(I);
      END LOOP;
  END;
  /

  ## REVERSE
  BEGIN
      FOR I IN REVERSE 1..5 LOOP
          DBMS_OUTPUT.PUT_LINE(I);
      END LOOP;
  END;
  /

  ## WHILE LOOP ##
  -> 제어 조건이 TRUE인 동안만 문장 반복이 실행 됨
  -> LOOP를 실행할 때 조건이 처음부터 FALSE 이면 한번도 수행하지 않음

  형식

  WHILE 반복시킬 조건문 LOOP
  	반복시킬 문장;

  END LOOP;

  ex) 1~5까지 반복 처리
  DECLARE
  	N NUMBER :=1;
  BEGIN
  	WHILE N <=5 LOOP
  	DBMS_OUTPUT.PUT_LINE(N);
  	N := N+1;
  END LOOP;
  END;
  /

  @ Stored Procedure(저장 프로시저)
  -> 프로시저는 일련의 작업 절차를 정리해서 저장해 둔 것
  -> 여러 SQL문을 묶어서 미리 정의해 두고 하나의 요청으로 쉽게 실행 할 수 있음
  -> 자주 사용되는 복잡한 작업들을 간단하게 미리 만들어 두면 쉽게 사용이 가능함

  @ 프로시저 작성 및 실행 방법
  -> 매개변수의 데이터형 크기는 지정하면 안됨
        - (테이블.%TYPE, VARCHAR2 는 가능)
        - VARCHAR2(20) -> 에러발생

  -> SELECT 사용 시 INTO를 통해여 변수에 값 저장을 꼭 해야 함

  CREATE PROCEDURE 프로시저 이름 (매개변수명1 자료형, 매개변수명2 자료형)
  IS
        지역변수 선언;
  BEGIN
        실행할 문장 1;
        실행할 문장 2;
        실행할 문장 3;
  END;
  /

  @ 실행 방법
  EXECUTE 프로시저 [(전달값1, 전달값2, ......)];
    -> 값을 전달 받아야 하는 형태라면(매개변수가 있다면) 값을 넘겨 줄 수가 있음
    줄여서 EXEC

  @삭제
  DROP PROCEDURE 프로시저 이름;

    /*
    PROCEDURE 연습용 테이블 생성
    */
    CREATE TABLE EMP AS(
    SELECT *
    FROM EMPLOYEE
    );

    /* 사원번호 입력해서 삭제하는 PROCEDURE 생성 */
    CREATE PROCEDURE EMP_ID_DEL(ID EMP.EMP_ID%TYPE)
    IS
    BEGIN
      DELETE FROM EMP WHERE EMP_ID = ID;
    END;
    /

    /* 사원 삭제 */
    EXEC EMP_ID_DEL('&사원번호');

    ex)

    /*
    부서코드, 직급코드를 입력하여 사번, 이름을 검색하는 PROCEDURE
    */
    CREATE OR REPLACE PROCEDURE EMP_SEARCH
    (ID_CODE EMP.DEPT_CODE%TYPE := 'D9', J_CODE EMP.JOB_CODE%TYPE := 'J2')
    IS
        ID EMP.EMP_ID%TYPE;
        NAME EMP.EMP_NAME%TYPE;
    BEGIN
        SELECT EMP_ID, EMP_NAME
        INTO ID, NAME
        FROM EMP
        WHERE DEPT_CODE = ID_CODE AND JOB_CODE = J_CODE
        AND ROWNUM = 1;
        DBMS_OUTPUT.PUT_LINE('사번 -> ' || ID);
        DBMS_OUTPUT.PUT_LINE('이름 -> ' || NAME);
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN  DBMS_OUTPUT.PUT_LINE('데이터가 없습니다');
    END;
    /

    /* 사원 검색 */
    EXEC EMP_SEARCH('&부서코드', '&직급코드');
    EXEC EMP_SEARCH('D9'); -- D9와 DEFAULT 값 J2
    EXEC EMP_SEARCH(); -- DEFAULT 값 D9 / J2


    @ FUNCTION
    -> 프로시저와 거의 유사한 용도로 사용하지만, 실행 결과를 되돌려(RETURN)
    받을 수 있다는 점에서 프로시저와 다름
    -> 리턴 값이 반드시 존재 하는 객체

    @ 함수 작성 및 실행 방법

    CREATE [OR REPLACE] FUNCTION 함수이름 (매개변수명 자료형, 매개변수명 자료형....)
    RETURN 자료형
    IS
      지역변수선언;
    BEGIN
      실행할 SQL문;
      RETURN 데이터;
    END;

    ※ 주의 : 매개변수와 리턴 자료형에는 크기를 지정하지 마세요
