
  @ 패키지
  -> 자바의 패키지와 동일한 개념
  -> 같은 테이블을 참조하는 프로시저나 함수일 경우 같은 패키지로 묶을 수 있음
  -> 동일한 프로시저 또는 함수를 구분

  @ 패키지 선언 방법
  CREATE [OR REPLACE] PACKAGE 패키지명
  IS
      정의될 프로시저와 함수
  END;
  /


  @ 패키지에 소속된 프로시저나 함수 실행

  EXEC 패키지명, 저장프로시저명[(전달값......)];

  ex)
    CREATE [OR REPLACE] PACKAGE package_name
    IS
        PROCEDURE procedure_name1;
        PROCEDURE procedure_name2;
    END;
    /

@ TRIGGER
-> 데이터베이스가 미리 정해 놓은 조건을 만족하거나 어떠한 동작이 수행되면
자동적으로 수행되는 행동을 말함
            - 트리거의 사전적 의미 : 연쇄반응
-> 트리거는 테이블이나 뷰가 INSERT, UPDATE, DELETE 등의 DML문에 의해
데이터가 입력, 수정, 삭제 될 경우 자동으로 실행 됨

ex) 회원 탈퇴가 이루어질 경우 회원 탈퇴 테이블에 기존 회원 정보가
자동으로 입력되도록 설정
-> 회원이 탈퇴 했다고 해서 회원 정보를 바로 삭제 하게 되는게 아닌
별도의 테이블에 옮겨 놓고나 탈퇴한 회원이라는 기록을 남겨야 함

@ 트리거의 실행 시점
-> 트리거 실행 시점을 이벤트 전(BEFORE)이나 이벤트 후(AFTER)로 지정하여 설정

@ 트리거의 이벤트
-> 트리거의 이벤트는 사용자가 어떤 DML(INSERT, UPDATE, DELETE) 문을 실행 했을 때
트리거를 발생시킬 것인가를 결정

@ 트리거의 몸체
-> 트리거의 몸체는 해당 타이밍에 해당 이벤트가 발생했을 때 실행될 기본 로직이
포함되는 부분으로 BEGIN ~ END 안에 작성 함

@ 트리거의 유형
-> 트리거의 유형은 FOR EACH ROW에 의해 문장 레벨 트리거와 행 레벨 트리거로 나누어 짐
-> FOR EACH ROW가 생략되면 '문장 레벨 트리거'
-> FOR EACH ROW가 정의되면 '행 레벨 트리거'
-> 문장 레벨 트리거는 어떤 사용자가 트리거가 설정되어 있는 테이블에 대해
DML(INSERT, UPDATE, DELETE)문을 실행 시킬 때 트리거를 단 한번 발생 시킴
-> 행 레벨 트리거는 DML에 의해서 여러 개의 행이 변경된다면
각 행이 변경 될 때 마다 트리거를 발생 시킴
  (만약 5개의 행이 변경되면 5번의 트리거가 발생 함)

@ 트리거의 조건
-> 트리거의 조건은 행 레벨 트리거에서만 설정할 수 있으며 트리거 이벤트에
정의된 테이블에 이벤트가 발생할 때보다 구체적인 데이터 검색 조건을 부여 할 때 사용

@ 트리거 실행 확인
SELECT *
FROM ALL_TRIGGER;
FROM USER_TRIGGERS;


ex)
CREATE OR REPLACE TRIGGER M_TBL_TRG
AFTER DELETE
ON M_TBL
FOR EACH ROW
BEGIN
  INSERT INTO DEL_M_TBL VALUES
  (:OLD.USER_ID, :OLD.USERNAME, :OLD.ENROLL_DATE, SYSDATE);
END;
/

<바인드 변수> 2가지
  - FOR EACH ROW를 사용해야 함
:NEW - 새로 입력된 (INSERT, UPDATE) 데이터
:OLD - 기존 데이터가

:OLD.컬럼명 -> SQL 반영 전의 컬럼 데이터
:NEW.컬럼명 -> SQL 반영 후의 컬럼 데이터

※ DELETE에서는 삭제이기 때문에 OLD만 사용할 수 있음

@ ROLE
-> 사용자에게 여러 개의 권한을 한번에 부여 할 수 있는 개체
-> 사용자에게 권한을 부여할 때 한개 씩 부여하게 된다면 권한 부여 및 회수에 따른
관리자가 불편함

@ ORACLE DB 설치가 기본 제공되는 ROLE
-> CONNECT, RESOURCE, DBA
-> CONNECT : 사용자가 데이터 베이스에 접속 가능하도록 하기 위한 권한이 있는 ROLE
-> RESOURCE : 사용자가 객체(테이블)를 생성하기 위한 시스템 권한이 제공되는 ROLE
  ※ 기본 객체 생성 및 데이터 삽입, 수정, 삭제 등등...
-> DBA : 시스템 자원을 무제한적으로 사용가능하며 시스템 관리를 하기 위한 모든 권한이 있는 ROLE


@ 사용자 ROLE 생성 및 부여
ex) 3가지 ROLE 만들기
  - EMPTYROLE : 아무런 권한이 없는 ROLE
  - CONNECTROLE : 접속 권한만 있는 ROLE
  - MANAGERROLE : 접속 권한 + TABLE 생성 권힌이 있는 ROLE

  
