
  @ TCL (Transaction Control Language)
  -> 트랜잭션 제어 언어
  -> COMMIT 과 ROLLBACK이 있음

  @ 트랙잭션이란?
  -> 한꺼번에 수행되어야 할 최소의 작업 단위를 말함
        - 논리적 작업 단위
  -> 하나의 트랜잭션으로 이루어진 작업들은 반드시 한번에 완료가 되어야 하며,
    그렇지 않은 경우에는 한번에 취소가 되어야 함

    ex) ATM 기기의 업무처리

    1. 카드 삽입
    2. 메뉴 선택(인출)
    3. 금액 확인 및 비밀번호 입력(인증)
    4. 실제 내부(계좌)에서 금액만큼 돈을 인출
    5. 실제 현금 인출
    6. 카드 반환
    7. 완료

    @ 트랙잭션 SQL

    COMMIT : 트랙잭션 작업이 정상 완료 되면 변경 내용을 영구히 저장
    SAVEPOINT <SAVEPOINT 명> : 현재 트랜잭션 작업 지점에 이름을 지정함
                              하나의 트랙잭션 안에서 구역을 나눌 수 있음

    ROLLBACK : 트랙잭션 작업을 모두 취소하고 최근 COMMIT 지점으로 이동
    ROLLBACK TO <SAVEPOINT명> : 트랜잭션 작업을 취소하고 SAVEPOINT 지점으로 이동

    ex)
    /* TCL (COMMIT & ROLLBACK)*/
    CREATE TABLE USERTBL(
      USERNO NUMBER UNIQUE,
      ID VARCHAR2(20) PRIMARY KEY,
      PASSWORD CHAR(20) NOT NULL
    ); -- USERTBL 테이블 생성

    COMMIT; -- 커밋(테이블 생성)

    INSERT INTO USERTBL
    VALUES(1, 'test1', 'password1');

    INSERT INTO USERTBL
    VALUES(2, 'test2', 'password2');

    INSERT INTO USERTBL
    VALUES(3, 'test3', 'password2');

    SELECT *
    FROM USERTBL; -- 조회

    ROLLBACK; -- 롤백(삽입한 데이터 사라짐)

    /* 데이터 다시 삽입*/
    INSERT INTO USERTBL
    VALUES(1, 'test1', 'password1');

    INSERT INTO USERTBL
    VALUES(2, 'test2', 'password2');

    INSERT INTO USERTBL
    VALUES(3, 'test3', 'password2');

    COMMIT; -- 커밋(데이터)

    SELECT *
    FROM USERTBL; -- 조회

    UPDATE USERTBL
    SET PASSWORD = 'pass11'
    WHERE id = 'test1';

    SELECT *
    FROM USERTBL; -- 조회

    ROLLBACK; -- 롤백(바꾼 test1 의 비밀번호  pass11 -> password1)


    SAVEPOINT SP1; -- 세이브 포인트

    UPDATE USERTBL
    SET PASSWORD = 'pass22'
    WHERE id = 'test3'; -- 잘못해서 test3로 입력

    ROLLBACK TO SP1; -- 세이브 포인트 SP1으로 되돌아감

    SELECT *
    FROM USERTBL; -- 조회

    UPDATE USERTBL
    SET PASSWORD = 'pass22'
    WHERE ID = 'test2'; -- 정상적으로 입력
    COMMIT; -- 커밋(최종완료)

    SELECT *
    FROM USERTBL; -- 조회

    ## 테이블의 내용 수정
    UPDATE USERTBL
    SET PASSWORD = 'pass22'
    WHERE id = 'test2';

    SAVEPOINT SP1; -- 세이브 포인트 지점 설정

    ROLLBACK TO SP1; -- 세이브 포인트로 롤백

    @ SAVEPOINT 만드는 방법

    -> SAVEPOINT 세이브포인트 명
      ex) SAVEPOINT SP1;

    -> SAVEPOINT는 COMMIT을 하게 되면 모두 사라지게 됨

    ## SAVEPOINT 지점으로 롤백 하는 방법 ##

    기본적인 롤백 : ROLLBACK (마지막 COMMIT 지점으로 이동)

    SAVEPOINT 롤백 : ROLLBACK TO 세이브포인트 명 (해당 세이브포인트 지점으로 이동)
              ex) ROLLBACK TO SP1;

    @ 데이터 딕셔너리 (Data  Dictionary)
    -> 자원을 효율적으로 관리하기 위한 다양한 정보를 저장하는 시스템 테이블
    -> 데이터 딕셔너리는 사용자가 테이블을 생성하거나 사용자를 변경하는 등의
    작업을 할 때 데이터 베이스 서버에 의해 자동으로 갱신되는 테이블
    -> 사용자는 데이터 딕셔너리의 내용을 직접 수정하거나 삭제할 수 없음
    -> 데이터 딕셔너리 안에는 중요한 정보가 많이 있기 때문에 사용자는 이를 활용하기 위해 데이터 딕셔너리 뷰를 사용하게 됨

        ※ 뷰(VIEW)는 원본 테이블을 커스터마이징 해서 보여주는 역할을 하는 가상의 TABLE


    ## 일반적으로 많이 쓰는 3개의 데이터 딕셔너르 뷰 (Data Dictionary View)

    1. DBA_XXXXC : 데이터 베이스 관리자만 접근이 가능한 객체 등의 정보 조회
      (DBA는 모든 접근이 가능하므로 결국 디비에 있는 모든 객체에 대한 조회를 말함)

    2. ALL_XXXX : 자신의 계정이 소유하거나 권한 부여 받은 객체 등에 관한 정보 조회

    3. USER_XXXX : 자신의 계정이 소유한 객체 등에 관한 정보 조회

    @ VIEW

    -> 하나 이상의 테이블에서 원하는 데이터를 선택하여 새로운 가상 테이블을 만들어 주는 것
    -> 다른 테이블에 있는 데이터를 보여줄 뿐이여, 데이터 자체를 포함하고 있는 것은 아님
            - 저장장치 내에 물리적으로 존재하지 않고 가상테이블로 만들어짐
            - 물리적인 실제 테이블과의 링크 개념

    -> 뷰를 사용하면 특정 사용자가 원본 테이블에 접근 하여 모든 데이터르 보게 하는 것을 방지 할 수 있음
            - 웒본 테이블이 아닌 뷰를 통한 특정 데이터만 보여지게 만듦

    -> 뷰를 만들기 위해서는 별도의 권한이 필요함

    @ VIEW Data Dictionary 확인
    -> SELECT *
      FROM USER_VIEWS;

    @ VIEW 사용법
    CREATE VIEW <뷰 이름> AS <SELECT 구문>

    @ 뷰 생성을 위한 권한 뷰어 - SYSTEM 계정으로 권한 부여
    GRANT CREATE VIEW TO [계정 명];


    ### VIEW를 이해 하기 위한 간단 실습 ###

    -> 테이블 복사 형태
    1. 기존 테이블을 편집한 복사 테이블 생성
    2. 복사된 테이블을 타 계정에게 권한 부여
    3. 타 계정에서 복사된 테이블을 검색
    4. 원본 테이블의 정보 수정
    5. 타 계정에서 복사된 테이블의 정보 검색 (변경되지 않은 것을 확인)

    -> 뷰를 사용한 형태

    1. 기존 테이블을 편집한 VIEW를 생성
    2. 해당 VIEW를 볼 수 있음 권한을 타 계정에게 권한 부여
    3. 타 계정에서 VIEW를 검색
    4. 원본 테이블의 정보 수정
    5. 타 계정에서 VIEW를 검색 (원본 테이블의 정보에 따라 VEIW가 변경되는 것을 볼 수 있음)

    ex)

    /* 뷰 생성 */
    CREATE VIEW EMP_HEALTH_VIEW AS
    SELECT EMP_ID, EMP_NAME
    FROM EMPLOYEE;

    /* 뷰 확인 */
    SELECT *
    FROM EMP_HEALTH_VIEW;

    /* 뷰 삭제 */

    DROP VIEW EMP_HEALTH_VIEW;

    ※ 생성된 뷰를 가지고 DML 구문 (INSERT, UPDATE, DELETE) 사용이 가능 함
    ※ DML 구문을 가지고 뷰 테이블에 내용을 변경 할 시 실제 테이블의 내용이 변경 되는 것

    @ DML (INSERT, UPDATE, DELETE) 명령어로 조작이 불가능한 경우

    1. 뷰 정의에 포함되지 않은 컬럼을 조작하는 경우
    2. 뷰에 포함되지 않은 컬럼에 중에 베이스가 되는 테이블 컬럼이 NOT NULL
      제약조건이 지정된 경우
    3. 산술 표현식으로 정의 된 뷰인 경우
    4. JOIN 을 이용해 여러 테이블을 연결한 경우
        (JOIN일 경우 베이스 테이블만 수정 가능)
    5. DISTINCT 를 포함한 경우
    6. 그룹합수나 GROUP BY 절을 포함한 경우

    /* 뷰 문제 */
    특정 업체 (KHLOVE1) 에서
    직원 ID, 직원이름, 부서명 정보가 필요하여 본사에 요청하였음
    본사에서는 각정보를 가지고 있는 별도의 VIEW를 생성하여
    khlove1에게 SELECT 할 수 있는 권한을 주고자 한다

    khlove1 계정에서 SELECT * FROM EMP_INFO_VIEW;
    라는 SQL을 작성하였을 때 직원 ID, 직원이름, 부서명 정보가 보일 수 있도록 VIEW를 만들어 보아라

    @ VIEW 옵션
    1. OR REPLACE
    -> 생성한 뷰가 존재하면, 뷰를 갱신 함
    -> 없으면 새롭게 생성

    ex)

    CREATE VIEW [OR REPLACE] EMP_INFO_VIEW
    AS SELECT EMP_ID, EMP_NAME
    FROM EMPLOYEE;

    2. WITH CHECK OPTION
    -> 설정한 컬럼의 값을 수정하지 못하게 함
    -> 조건(WHERE)을 주어 뷰를 설정할 때 해당 옵션을 주게 되면 조건에
    사용되는 컬럼의 값을 변경할 수 없게 됨

      ex)
      CREATE VIEW EMP_VIEW
      AS SELECT EMP_ID, EMP_NAME
      FROM EMPLOYEE
      WHERE EMP_ID = 200 WITH CHECK OPTION;

    3. WITH READ ONLY
    -> 뷰에 대해 조회만 가능하고, 삽입, 수정, 삭제 등을 하지 못하게 하는 옵션
        ※ CHECK 와 READ ONLY 의 차이점은 대상이 컬럼 인지 아니면 전체 뷰 인지의 차이

      ex)
      CREATE VIEW EMP_VIEW
      AS SELECT EMP_ID, EMP_NAME
      FROM EMPLOYEE
      WHERE EMP_ID = 200
      WITH READ ONLY;


    @ SEQUENCE
    -> 순차적으로 정수 값을 자동으로 생성하는 객체로, 자동 번호 발생기의 역할을 함

    표현식

    CREATE SEQUENCE 시퀸스 명

    1. [START WITH 숫자]
    2. [INCREAMENT BY 숫자]
    3. [MAXVALUE 숫자 | NOMAXVALUE]
    4. [MINVALUE 숫자 | NOMAXVALUE]
    5. [CYCLE | NOCYCLE]
    6. [CACHE | NOCACHE]

    설명
    1. 처음 발생시킬 시작 값 지정 (기본 값 1)
    2. 다음 값에 대한 증가치 (기본 값 1)
    3. 발생시킬 최대 값 지정 (10^27 - 1 까지 가능)
    4. 발생시킬 최소 값 지정 (-10^26)
    5. 시퀸스가 최대 값 까지 증가를 완료하면 CYCLE은 START WITH 설정 값으로 돌아가고
        NOCYCLE은 에러를 발생 함
    6. CACHE는 메모리상에서 시퀸스값을 관리
          - 실제 값은 다 증가하지만 메모리의 효율을 위해 사용 됨
          - NOCACHE는 메모리상에서 시퀸스를 관리하지 않음

    @ SEQUENCE Data Dictionary
    -> SELECT * FROM USER_SEQUENCES;

    @ 시퀸스 객체 생성하기
    CREATE SEQUENCE USERTBL_NO_SEQ        -- USERTBL_NO_SEQ 객체 생성
    START WITH 1                          -- 시작번호는 1부터
    INCREMENT BY 1                       -- 1씩 증가
    MAXVALUE 100                          -- 최대 100까지
    NOCYCLE                               -- 100 이후에는 증가하지 않고 에러 발생
    NOCACHE;                              -- 캐시 X

    @ 시퀸스 사용
    CURRVAL : 현재 값을 반환
    NEXTVAL : 현재 시퀸스 값의 다음 값을 반환

    ※ 첫 시작 값은 없으므로 NEXTVAL을 무조건 1번 실행하고 CURRVAL을 해야 함
