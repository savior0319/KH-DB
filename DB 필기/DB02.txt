
 @ 컬럼 별칭
 -> 출력되는 결과물 컴럼에 별칭을 부여할 수 있음
 -> AS를 사용하여 출력되는 Result Set에 컬럼명을 변경 할 수 있음

   ex)
   -- 보너스 금액 + 연봉
   SELECT EMP_NAME, (SALARY * 12) * (1 + BONUS) AS "연봉 + 보너스"
   FROM EMPLOYEE
   WHERE (SALARY * 12) * (1 + BONUS) IS NOT NULL;


 @ 리터럴
 -> 임의로 지정한 문자열을 SELECT 절에 사용하면, 테이블에 존재하는 데이터처럼
    사용할 수 있음
   ex)
   -- 보너스 금액 + 연봉 + 리터럴
  SELECT EMP_NAME, (SALARY * 12) * (1 + BONUS) AS "연봉(보너스)", '원' AS "단위"
  FROM EMPLOYEE
  WHERE (SALARY * 12) * (1 + BONUS) IS NOT NULL;

  @ DISTINCT
  -> 컬럼에 포함된 중복 값을 한번씩만 표시하고자 할 때 사용 됨

  @ 비교 연산자
  -> 표현식 사이의 관계를 비교하기 위해 사용하고, 비교 결과는 논리 결과 중에 하나
    (TRUE / FALSE / NULL)가 됨
  -> 단, 비교하는 두 컬럼 값 / 표현식은 서로 동일한 데이터 타입이어야 함


  ───────────────────────────────────────────────────────────────────────────
      연산자                       설명
  ───────────────────────────────────────────────────────────────────────────
      =                           같다
      >, <                        크다, 작다
      >=, <=                      크거나 같다, 작거나 같다
      <>, !=, ^=                  같지 않다
      BETWEEN AND                 특정 범위에 포함되는지 비교
      LIKE/NOT LIKE               문자 패턴 비교
      IS NULL / IS NOT NULL       NULL 여부 비교
      IN / NOT IN                 비교 값 목록에 포함 / 미포함 되는지 여부 비교
  ───────────────────────────────────────────────────────────────────────────


  ※ <> 작거나 크다라는 의미 / 즉, 같지 않다라는 뜻

  @ 연결 연산자
  -> 연결 연산자는 '||'를 사용하여 여러 컬럼을 하나의 컬럼인 것 처럼 연결하거나
  컬럼과 리터럴을 연결 할 수 있음


  @ 비교 연산자 - BETWEEN AND
  -> 비교하려는 값이 지정한 범위 (상한 값과 하한 값의 경계도 포함)에
  포함되면 TRUE를 리턴하는 연산자


  작은 따옴표 : 문자열을 감싸주는 용도
  큰 따옴표 : 컬럼명을 감싸주는 용도

  ex)
    SELECT SALARY AS "급여"
    FROM EMPLOYEE
    WHERE EMP_NAME = '전지연';

  @ 비교 연산자 - LIKE
  -> 비교하려는 값이 지정한 특정 패턴을 만족시키면 TRUE를 리턴하는 연산자로
  '%'와 '_' 를 와일드 카드로 사용 할 수 있음
      ※ 와일드 카드 : 대체해서 사용 할 수 있음
      ※ _ : 한문자 . % : 모든것

  ex)
  SELECT *
  FROM EMPLOYEE
  WHERE EMP_NAME LIKE '전%';

  SELECT *
  FROM EMPLOYEE
  WHERE PHONE LIKE '%3%';  -- 전화번호에 3이 들어감


  @ 비교 연산자 - NOT LIKE
  -> LIKE와 사용법은 같으나 일치하지 않는 것을 의미함
  -> 비교하려는 값과 일치하지 않는 것을 검색

  ex)
  SELECT *
  FROM EMPLOYEE
  WHERE EMP_NAME NOT LIKE '이%';  -- 이씨가 아닌 사람


  @ 비교 연산자 - IS NULL / IS NOT NULL
  -> NULL 여부를 비교하는 연산자

ex)
  SELECT EMP_NAME
  FROM EMPLOYEE
  WHERE MANAGER_ID IS NULL AND DEPT_CODE IS NULL;

  SELECT EMP_NAME
  FROM EMPLOYEE
  WHERE DEPT_CODE IS NULL AND BONUS IS NOT NULL;

  @ 비교 연산자 IN
  -> 비교하려는 값 목록에 일치하는 값이 있으면 TRUE를 반환하는 연산자

  ex)
  SELECT *
  FROM EMPLOYEE
  WHERE DEPT_CODE IN('D6', 'D9'); -- 'D6' or 'D9'

 @ 연산자 우선 순위
 -> 여러 연산자를 사용하는 경우에는 우선순위를 고려해서 사용 해야 함

 산술 > 연결 > 비교 > IS NULL, IS NOT NULL, LIKE, IN, NOT IN > BETWEEN AND, NOT BETWEEN AND > 논리 (NOT) > 논리 (AND) > 논리(OR)

 @ ORDER BY
 -> SELECT 한 결과물에 대해 정렬을 할 때 사용하는 구문
 -> SELECT 구문의 가장 마지막에 작성하며, 실행 순서도 가장 마지막에 수행 함

 표현식
 SELECT 컬럼1, 컬럼2 ...
 FROM 테이블명
 WHERE 조건절
 ORDER BY 컬럼명|별칭|컬럼순서 정렬방식

 데이터 정렬 방법

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
                    NUMBER                   CHARACTER                  DATE                   NULL
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  ASC               작은 수 -> 큰 수          사전순                     빠른 날 -> 늦은 날       맨아래 행 (NULL이 맨 아래로 감)
  DESC                                                        (내림차순)
───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

## ASC : 오름차순 (DEFAULT) ##
-> 지정한 컬럼을 기준으로 오름차순으로 정렬
-> 기본적으로 ASC 정렬

## DESC : 내림차순 ##
-> 지정한 컬럼을 기준으로 내림차순으로 정렬

ex)
  SELECT EMP_ID AS "ID"
  FROM EMPLOYEE
  ORDER BY EMP_ID DESC;

  SELECT *
  FROM EMPLOYEE
  ORDER BY EMP_NAME DESC;

  SELECT *
  FROM EMPLOYEE
  ORDER BY 3 DESC; -- 컬럼 숫자 (내림차순)

  @ 함수 (Function)
  -> 하나의 큰 프로그램에서 반복적으로 사용되는 부분들을 분리 하여 작성해 놓은 작은 서브 프로그램으로, 호출하여 값을 전달하면 수행 결과를 리턴하는
  방식으로 사용됨

  값 전달 및 호출 -> 작업 수행 -> 결과 값 리턴

  함수의 유형

  단일 행 함수 : 각 행마다 반복적으로 적용되어 입력 받은 행의 개수만큼 결과를 반환
  그룹 함수 : 특정한 행들의 집합으로 그룹이 형성되어 적용됨
              그룹당 1개의 결과를 반환


@ 문자 처리 함수
=============================================================================================
|  구분	|	입력값 타입	|	리턴값 타입	|		설명		                              |
=============================================================================================
|LENGTH	|		         	|		        	|문자열의 길이를 반환함		                 |
--------| 	  		| 			|------------------------------------
|LENGTHB|		         	|			        |문자열의 바이트 크기를 반환함	             |
--------|			| 			|------------------------------------
|INSTR	|		         	|		         	|특정 문자의 위치를 반환함	    |
--------|			| 			|------------------------------------
|INSTRB	|			        |			        |특정 문자의 위치 바이트 크기를 반환|
--------|			| 			|------------------------------------
|	      |			        |		         	|문자열을 지정된 숫자만큼의 크기로  |
|LPAD	  |			        |			        |설정하고, 지정한 문자를 왼쪽부터   |
|	      |			        |	        		|채워서 생성된 문자열을 리턴 함	    |
--------|			| 			|------------------------------------
|	      |			        |		         	|문자열을 지정된 숫자만큼의 크기로, |
|RPAD	  |		         	|		        	|설정하고, 지정한 문자를 오른쪽부터 |
|	      |		         	|		         	|채워서 생성된 문자열을 리턴 함	    |
--------|			| 			|------------------------------------
|RTRIM	|		        	|			        |왼쪽부터 지정한 문자를 잘라내고    |
|	      |		         	|		         	|남은 문자를 리턴 함		    |
--------|			| 			|------------------------------------
|LTRIM	|	CHARACTER  	|	NUMBER	  	|오른쪽부터 지정한 문자를 잘라내고  |
|	      |		         	|		         	|남은 문자를 리턴 함		    |
--------|			| 			|------------------------------------
|TRIM	  |		          |			        |왼쪽/오른쪽/양쪽부터 지정한 문자를 |
|     	|			        |		         	|잘라내고 남은 문자를 리턴 함	    |
--------|			| 			|------------------------------------
|SUBSTR	|		         	|		        	|지정한 위치에서 지정한 길이만큼    |
|	      |		         	|		         	|문자를 잘라내어 리턴 함	    |
--------|			| 			|------------------------------------
|SUBSTRB|		         	|			        |지정한 위치에서 지정한 바이트만큼  |
|     	|		        	|		         	|문자를 잘라내어 리턴 함	    |
--------|			| 			|------------------------------------
|LOWER	|			        |			        |전달받은 문자/문자열을 소문자로    |
|	      |		         	|		         	|변환하여 리턴 함		    |
--------|			| 			|------------------------------------
|UPPER	|		        	|		        	|전달받은 문자/문자열을 대문자로    |
|	      |		         	|		         	|변환하여 리턴 함		                   |
--------|			| 			|------------------------------------
|	      |		         	|		         	|전달받은 문자/문자열의 첫 글자를           |
|INTCAP	|		         	|			        |대문자로, 나머지 글자는 소문자로          |
|     	|		        	|		         	|변환하여 리턴 함		                    |
--------|			| 			|------------------------------------
|CONCAT	|			        |		         	|인자로 전달받은 두 개의 문자/문자열|
|	      |		         	|			        |을 합쳐서 리턴 함		                     |
--------|			| 			|------------------------------------
|     	|			        |			        |전달받은 문자열 중에 지정한 문자를        |
|REPLACE|			        |			        |인자로 전달받은 문자로 변환하여           |
|	      |			        |			        |리턴 함			                            |
---------------------------------------------------------------------------------------------
