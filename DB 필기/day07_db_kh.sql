/* MEMBER TABLE 생성*/
CREATE TABLE MEMBER (
  MEMBER_ID     VARCHAR2(20),
  MEMBER_PWD    VARCHAR2(20),
  MEMBER_NAME   VARCHAR2(20)
);

SELECT *
FROM MEMBER;

DESCRIBE MEMBER;
/* 컬럼 주석 */

COMMENT ON COLUMN MEMBER.MEMBER_ID IS
  '회원아이디';

COMMENT ON COLUMN MEMBER.MEMBER_PWD IS
  '회원비빌번호';

COMMENT ON COLUMN MEMBER.MEMBER_NAME IS
  '회원이름';
  
  /* INSERT */
INSERT INTO MEMBER VALUES ( 'AAA', '1111', 'ㅇㅇㅇ' );

INSERT INTO MEMBER VALUES ( 'AAA', '2222', 'ㅎㅎㅎ' );

TRUNCATE TABLE MEMBER;

DROP TABLE MEMBER;

SELECT *
FROM EMPLOYEE;

DESC EMPLOYEE;

/* CONSTRAINT (EMPLOYEE 테이블 제약조건 확인)*/
SELECT CONSTRAINT_NAME,
       CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'EMPLOYEE';

/* USER_NOTCONS 테이블 생성 */
  CREATE TABLE USER_NOTCONS
  (
    USER_NO NUMBER,
    USER_ID VARCHAR2(20),
    USER_PWD VARCHAR2(30),
    USER_NAME VARCHAR2(30),
    GENDER VARCHAR2(30),
    PHONE VARCHAR2(30),
    EMAIL VARCHAR2(50)
  );

/* USER_NOTCONS 테이블 제약조건 확인 */
SELECT CONSTRAINT_NAME,
       CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'USER_NOTCONS';

/* USER_NOTCONS  튜플 삽입 */
INSERT INTO USER_NOTCONS 
VALUES(1, NULL, NULL, NULL, NULL, NULL, NULL);

/* USER_NOTCONS 테이블 조회 */
SELECT *
FROM USER_NOTCONS;

/* USER_NOTCONS 테이블 삭제 */
DROP TABLE USER_NOTCONS;

/* USER_NOTCONS 테이블 생성 (NOT NULL 제약조건)*/
  CREATE TABLE USER_NOTCONS
  (
    USER_NO NUMBER NOT NULL,
    USER_ID VARCHAR2(20) NOT NULL,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    GENDER VARCHAR2(30) NOT NULL,
    PHONE VARCHAR2(30) NOT NULL,
    EMAIL VARCHAR2(50)  NOT NULL
  );
  
/* 테이블 제약조건 확인 */
SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
FROM USER_CONS_COLUMNS
WHERE TABLE_NAME = 'USER_NOTCONS'
UNION
SELECT TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'USER_NOTCONS';

/* USER_NOTCONS 테이블 튜플 삽입 */
INSERT INTO USER_NOTCONS
VALUES('1', 'USER1', 'P@SSW0RD', '이름', '남', '010-0000-0000', 'EMAIL@EMAIL.EMAIL');

INSERT INTO USER_NOTCONS
VALUES('2', 'USER2', 'P@SSW0RD', '이름', '남', '010-0000-0000', 'EMAIL@EMAIL.EMAIL');

INSERT INTO USER_NOTCONS
VALUES('3', 'USER3', 'P@SSW0RD', '이름', '남', '010-0000-0000', 'EMAIL@EMAIL.EMAIL');

INSERT INTO USER_NOTCONS
VALUES('4', 'USER4', 'P@SSW0RD', '이름', '남', '010-0000-0000', 'EMAIL@EMAIL.EMAIL');


/* USER_NOTCONS 테이블 생성 (NOT NULL, UNIQUE(USER_ID) 제약조건) */
  CREATE TABLE USER_NOTCONS
  (
    USER_NO NUMBER NOT NULL,
    USER_ID VARCHAR2(20) NOT NULL UNIQUE,
    USER_PWD VARCHAR2(30) NOT NULL,
    USER_NAME VARCHAR2(30) NOT NULL,
    GENGER VARCHAR2(30) NOT NULL,
    PHONE VARCHAR2(30) NOT NULL,
    EMAIL VARCHAR2(50)  NOT NULL
  ); 
  
/* USER_NOTCONS 테이블 생성 (NOT NULL, UNIQUE(USER_ID), PRIMARY KEY(USER_NO) 제약조건) */
CREATE TABLE USER_NOTCONS
(
      USER_NO NUMBER,
      USER_ID VARCHAR2(20) UNIQUE,
      USER_PWD VARCHAR2(30) NOT NULL,
      USER_NAME VARCHAR2(30) NOT NULL,
      GENDER VARCHAR2(30) NOT NULL,
      PHONE VARCHAR2(30) NOT NULL,
      EMAIL VARCHAR2(50)  NOT NULL,
      PRIMARY KEY(USER_NO)
);

/* USER_NOTCONS 테이블 생성 (NOT NULL, UNIQUE(USER_ID), PRIMARY KEY(USER_NO) 제약조건
튜플 삽입) */
INSERT INTO USER_NOTCONS
VALUES(1, 'USER1', 'P@SSw0RD', '이름', 'F', '10-0000-0000', 'EMAIL@EMAIL.MAIL');

INSERT INTO USER_NOTCONS
VALUES(2, 'USER2', 'P@SSw0RD', '이름', 'M', '10-0000-0000', 'EMAIL@EMAIL.MAIL');


/* CHECK 제약조건 (GENDER = 'M' OR 'F') */
CREATE TABLE USER_NOTCONS(
      USER_NO NUMBER,
      USER_ID VARCHAR2(20) UNIQUE,
      USER_PWD VARCHAR2(30) NOT NULL,
      USER_NAME VARCHAR2(30) NOT NULL,
      GENDER VARCHAR2(30) CHECK (GENDER IN('F', 'M')),
      PHONE VARCHAR2(30) NOT NULL,
      EMAIL VARCHAR2(50)  NOT NULL,
      PRIMARY KEY(USER_NO)
);

/* 구매 테이블 생성 */
CREATE TABLE BUY(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID) 
    ON DELETE SET NULL -- 참조된 값 삭제 시 NULL
);


/* 테이블 정보 삽입 */
INSERT INTO BUY
VALUES(2, 'USER2', '사과', SYSDATE);

INSERT INTO BUY
VALUES(3, 'USER3', '파인애플', SYSDATE);

INSERT INTO BUY
VALUES(4, 'USER4', '딸기', SYSDATE);


INSERT INTO USER_NOTCONS
VALUES(2, 'USER2', 'USER2', '김말떵', 'F', '010-4444-2323', '1@MAIL.COM');

INSERT INTO USER_NOTCONS
VALUES(3, 'USER3', 'USER3', '고길떵', 'M', '010-4144-1353', '2@MAIL.COM');

INSERT INTO USER_NOTCONS
VALUES(4, 'USER4', 'USER4', '둘리', 'M', '010-6314-2533', '3@MAIL.COM');

/* 조회 및 삭제 */
SELECT *
FROM USER_NOTCONS;

SELECT *
FROM BUY;

DROP TABLE USER_NOTCONS;
DROP TABLE BUY;
/**/

/* 참조하는 값 삭제 시 NULL로 변경 */
DELETE  FROM USER_NOTCONS
WHERE USER_NO LIKE 2;

/* 참조된 값 CASCADE */
CREATE TABLE BUY(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY (USER_ID) REFERENCES USER_NOTCONS(USER_ID) 
    ON DELETE CASCADE -- 참조된 값 삭제 시 연쇄삭제
);

/* DEFAULT 사용 */
CREATE TABLE TESTTSL(
  DATA1 NUMBER DEFAULT 100,
  DATA2 NUMBER DEFAULT 200
);

INSERT INTO TESTTSL 
VALUES(DEFAULT, DEFAULT);

/* DEFAULT 값으로 100, 200이 삽입 됨*/
SELECT *
FROM TESTTSL;

/* SUBQuery를 이용한 테이블 생성*/
CREATE TABLE TEST AS (SELECT EMP_NAME FROM EMPLOYEE);
SELECT * FROM TEST;

CREATE TABLE TEST AS (SELECT * FROM EMPLOYEE WHERE 1 = 0);
SELECT * FROM TEST;

INSERT INTO TEST VALUES(100, 'AAA', '999999-1******', 'SSS@gmail.com', '01000000000', 'D1', 'J1', 'S1', 99999999, 0.5, null, sysdate, null, 'n');

/*  ## 만약 직원의 이름, 부서 정보를 가지고 있는 새로운 테이블을
    생성 해야 한다면? ## */
CREATE TABLE EMP_DEPT_TBL
AS 
SELECT EMP_NAME,DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);
    
SELECT * FROM EMP_DEPT_TBL;



/* 문제 1 */
CREATE TABLE EXPERT_TBL(
MEMBER_CODE NUMBER PRIMARY KEY,
MEMBER_ID VARCHAR2(20) UNIQUE,
MEMBER_PWD CHAR(20) NOT NULL,
MEMBER_NAME NCHAR(10) NOT NULL,
MEMBER_ADDR CHAR(50) NOT NULL,
GENDER VARCHAR2(5) CHECK(GENDER IN ('남', '여')),
PHONE VARCHAR2(20) DEFAULT '000-0000-0000'
);

/* 문제 2 */
CREATE TABLE A3COMPANY_TBL(
MEMBER_CODE NUMBER,
SKILL NCHAR(10) NOT NULL,
FOREIGN KEY (MEMBER_CODE) REFERENCES EXPERT_TBL(MEMBER_CODE)
ON DELETE CASCADE
);

/* 문제 3 */
CREATE TABLE A3COMPANY_TBL(
MEMBER_CODE NUMBER,
SKILL NCHAR(10) NOT NULL,
FOREIGN KEY (MEMBER_CODE) REFERENCES EXPERT_TBL(MEMBER_CODE)
);

/* 문제 4 */
INSERT INTO EXPERT_TBL
VALUES(100, 'mslove', '1234', '노민수', '경기도 부천', '남', '010-4254-5664');

INSERT INTO EXPERT_TBL
VALUES(101, 'khlove', '5437', '경실련', '인천광역시', '여', '010-1222-4444');

INSERT INTO EXPERT_TBL
VALUES(102, 'samsam2', 'jojo11', '김조조', '서울시 구로', '남', '010-4555-7778');

INSERT INTO EXPERT_TBL
VALUES(103, 'mongshell', 'choco00', '이롯데', '남태평양', '여', '010-6666-7458');

INSERT INTO EXPERT_TBL
VALUES(104, 'candy', 'whiteday', '박인기', '후쿠시마 원전', '남', '010-0000-0000');

INSERT INTO EXPERT_TBL
VALUES(105, 'smart', 'car00', '최바보', '베이징', '남', '010-8996-4226');

/* 문제 5 */
INSERT INTO A3COMPANY_TBL
VALUES(100, '해킹');

INSERT INTO A3COMPANY_TBL
VALUES(104, '교육');

INSERT INTO A3COMPANY_TBL
VALUES(102, '교육');

INSERT INTO A3COMPANY_TBL
VALUES(105, '개발');

SELECT COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = 'EXPERT_TBL';

SELECT COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT
FROM ALL_TAB_COLUMNS
WHERE TABLE_NAME = 'A3COMPANY_TBL';


/* DML (INSERT) */
CREATE TABLE TEST(
    DATA1 NUMBER,
    DATA2 NUMBER,
    DATA3 NUMBER,
    DATA4 NUMBER,
    DATA5 NUMBER
);

/* 순서대로 삽입 */
INSERT INTO TEST
VALUES(1, 2, 3, 4, 5);

/* 컬럼명 지정해서 삽입 */
INSERT INTO TEST(DATA2, DATA1, DATA3, DATA4, DATA5)
VALUES(2, 1, 3, 4, 5);

/* NULL 명시 안하고 삽입*/
INSERT INTO TEST(DATA1, DATA2, DATA3, DATA4)
VALUES(1, 2, 3, 4);


/* INSERT INTO - 테이블에서 컬럼 가져와서 삽입 */
CREATE TABLE EMP_01(
  EMP_ID NUMBER,
  EMP_NAME VARCHAR2(20),
  DEPT_TITLE VARCHAR2(20));

INSERT INTO EMP_01(
  SELECT EMP_ID, EMP_NAME, DEPT_TITLE
  FROM EMPLOYEE, DEPARTMENT
  WHERE DEPT_CODE = DEPT_ID(+));


/* INSERT ALL */
CREATE TABLE EMP_DEPT_01 AS 
  SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE
  FROM EMPLOYEE
  WHERE 1 = 0;

CREATE TABLE EMP_MANAGER AS
  SELECT EMP_ID, EMP_NAME, MANAGER_ID
  FROM EMPLOYEE
  WHERE 1 = 0;
  
/* EMP_DEPT_01 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을 조회하여 사번, 이름 소속부서, 입사일을 삽입하고,
(EMP_MANGER) 테이블에 EMPLOYEE 테이블에서 부서코드가 D2인 직원을 조회하여 사번, 이름, 관리자 사번을 삽입 해야함

즉, 가져오는 테이블 명 : EMPLOYEE
조건 : 부서코드가 D2
테이블과 조건이 같다면 ! INSERT ALL을 이용하여 한번에 처리가 가능함*/

INSERT ALL
INTO EMP_DEPT_01
VALUES (EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE)
INTO EMP_MANAGER
VALUES (EMP_ID, EMP_NAME, MANAGER_ID)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE, MANAGER_ID
FROM EMPLOYEE
WHERE DEPT_CODE LIKE 'D2';

SELECT * FROM EMP_DEPT_01;
SELECT * FROM EMP_MANAGER;


/* ## INSERT ALL을 사용하여 데이터 넣기 실습

1. EMPLOYEE 테이블의 구조를 복사하여 사번,이름,입사일,급여를 기록할 수 있는 테이블
EMP_OLD와 EMP_NEW를 생성하세요
	(같은 컬럼들을 가지고 있지만 테이블명이 달라지게 생성하는 것뿐) */
  
  CREATE TABLE EMP_NEW AS (SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEE WHERE 1 = 0);
  CREATE TABLE EMP_OLD AS (SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY  FROM EMPLOYEE WHERE 1 = 0);

/* 2. EMPLOYEE 테이블의 모든 사원의 입사일을 기준으로 2000년 1월 1일 이전에 입사한 사원의
사번,이름,입사일,급여를 조회해서 EMP_OLD 테이블에 삽입하고,
그전에 입사한 사원의 정보는 EMP_NEW 테이블에 삽입하시오 */

INSERT ALL
  WHEN HIRE_DATE > TO_DATE('2000/01/01') THEN
  INTO EMP_OLD VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
    WHEN HIRE_DATE <= TO_DATE('2000/01/01') THEN
  INTO EMP_NEW VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
  SELECT EMP_ID, EMP_NAME , HIRE_DATE, SALARY
FROM EMPLOYEE;

SELECT * FROM EMP_OLD
UNION
SELECT * FROM EMP_NEW;


/* UPDATE */
CREATE TABLE DEPT_COPY AS
SELECT * FROM DEPARTMENT;

UPDATE DEPT_COPY
SET DEPT_ID = 'D0'
WHERE DEPT_ID LIKE 'D1' OR DEPT_ID LIKE 'D2';

UPDATE DEPT_COPY
SET DEPT_ID = 'D0'
WHERE DEPT_TITLE LIKE '총무부';

SELECT * FROM DEPT_COPY;

/* 방명수 사원 급여와 보너스율을 유재식 사원과 동일하게 변경 */
CREATE TABLE TEMP_EMP AS 
SELECT * FROM EMPLOYEE;

UPDATE TEMP_EMP
SET (BONUS, SALARY) = (SELECT BONUS,SALARY  FROM TEMP_EMP WHERE EMP_NAME LIKE '유재식')
WHERE EMP_NAME LIKE '방명수';

SELECT *
FROM TEMP_EMP 
WHERE EMP_NAME IN ('방명수', '유재식');


/* MERGE */
CREATE TABLE N_TEST01(
  ID CHAR(20),
  NAME VARCHAR2(20)
);

CREATE TABLE N_TEST02(
  ID CHAR(20),
  NAME VARCHAR2(20)
);

DROP TABLE N_TEST02;

INSERT INTO N_TEST01 
VALUES('USER11', '유영훈');

INSERT INTO N_TEST01 
VALUES('USER22', '유미경');

INSERT INTO N_TEST01 
VALUES('USER33', '유지섭');

INSERT INTO N_TEST02 
VALUES('USER12', '무정현');

INSERT INTO N_TEST02 
VALUES('USER22', '무지수');

INSERT INTO N_TEST02 
VALUES('USER32', '무형조');

MERGE INTO N_TEST01
USING N_TEST02 ON (N_TEST01.ID = N_TEST02.ID)
WHEN MATCHED THEN UPDATE SET N_TEST01.NAME = N_TEST02.NAME
WHEN NOT MATCHED THEN INSERT VALUES(N_TEST02.ID, N_TEST02.NAME);

/* 숙제 */
CREATE TABLE EXPERT_TBL(
MEMBER_CODE NUMBER PRIMARY KEY,
MEMBER_ID VARCHAR2(20) UNIQUE,
MEMBER_PWD CHAR(20) NOT NULL,
MEMBER_NAME NCHAR(10) NOT NULL,
MEMBER_ADDR CHAR(50) NOT NULL,
GENDER VARCHAR2(5) CHECK(GENDER IN ('남', '여')),
PHONE VARCHAR2(20) DEFAULT '000-0000-0000'
); -- 1

CREATE TABLE A3COMPANY_TBL(
MEMBER_CODE NUMBER,
SKILL NCHAR(10) NOT NULL,
FOREIGN KEY (MEMBER_CODE) REFERENCES EXPERT_TBL(MEMBER_CODE)
); -- 2

INSERT INTO EXPERT_TBL
VALUES(100, 'mslove', '1234', '노민수', '경기도 부천', '남', '010-4254-5664');

INSERT INTO EXPERT_TBL
VALUES(101, 'khlove', '5437', '경실련', '인천광역시', '여', '010-1222-4444');

INSERT INTO EXPERT_TBL
VALUES(102, 'samsam2', 'jojo11', '김조조', '서울시 구로', '남', '010-4555-7778');

INSERT INTO EXPERT_TBL
VALUES(103, 'mongshell', 'choco00', '이롯데', '남태평양', '여', '010-6666-7458');

INSERT INTO EXPERT_TBL
VALUES(104, 'candy', 'whiteday', '박인기', '후쿠시마 원전', '남', '010-0000-0000');

INSERT INTO EXPERT_TBL
VALUES(105, 'smart', 'car00', '최바보', '베이징', '남', '010-8996-4226'); -- 3


INSERT INTO A3COMPANY_TBL
VALUES(100, '해킹');

INSERT INTO A3COMPANY_TBL
VALUES(104, '교육');

INSERT INTO A3COMPANY_TBL
VALUES(102, '교육');

INSERT INTO A3COMPANY_TBL
VALUES(105, '개발'); -- 4

CREATE TABLE EMP_OLD AS (SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEE);
CREATE TABLE EMP_NEW AS (SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEE); -- 5

INSERT ALL
WHEN TO_CHAR('2000/01/01') > HIRE_DATE THEN
INTO EMP_OLD VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
WHEN TO_CHAR('2000/01/01') <= HIRE_DATE THEN
INTO EMP_NEW VALUES(EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
FROM EMPLOYEE; -- 6



